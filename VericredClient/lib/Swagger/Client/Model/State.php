<?php
/**
 * State
 *
 * PHP version 5
 *
 * @category Class
 * @package  Vericred\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
/**
 * State Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     Vericred\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class State implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    static $swaggerModelName = 'State';

    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'id' => 'int',
        'name' => 'string',
        'code' => 'string',
        'fips_number' => 'string',
        'last_date_for_individual' => '\DateTime',
        'last_date_for_shop' => '\DateTime',
        'live_for_business' => 'bool',
        'live_for_consumers' => 'bool'
    );
  
    static function swaggerTypes() {
        return self::$swaggerTypes;
    }

    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'id' => 'id',
        'name' => 'name',
        'code' => 'code',
        'fips_number' => 'fips_number',
        'last_date_for_individual' => 'last_date_for_individual',
        'last_date_for_shop' => 'last_date_for_shop',
        'live_for_business' => 'live_for_business',
        'live_for_consumers' => 'live_for_consumers'
    );
  
    static function attributeMap() {
        return self::$attributeMap;
    }

    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'id' => 'setId',
        'name' => 'setName',
        'code' => 'setCode',
        'fips_number' => 'setFipsNumber',
        'last_date_for_individual' => 'setLastDateForIndividual',
        'last_date_for_shop' => 'setLastDateForShop',
        'live_for_business' => 'setLiveForBusiness',
        'live_for_consumers' => 'setLiveForConsumers'
    );
  
    static function setters() {
        return self::$setters;
    }

    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'id' => 'getId',
        'name' => 'getName',
        'code' => 'getCode',
        'fips_number' => 'getFipsNumber',
        'last_date_for_individual' => 'getLastDateForIndividual',
        'last_date_for_shop' => 'getLastDateForShop',
        'live_for_business' => 'getLiveForBusiness',
        'live_for_consumers' => 'getLiveForConsumers'
    );
  
    static function getters() {
        return self::$getters;
    }

    /**
      * $id Primary Key of State
      * @var int
      */
    protected $id;
    /**
      * $name Name of state
      * @var string
      */
    protected $name;
    /**
      * $code 2 letter code for state
      * @var string
      */
    protected $code;
    /**
      * $fips_number National FIPs number
      * @var string
      */
    protected $fips_number;
    /**
      * $last_date_for_individual Last date this state is live for individuals
      * @var \DateTime
      */
    protected $last_date_for_individual;
    /**
      * $last_date_for_shop Last date this state is live for shop
      * @var \DateTime
      */
    protected $last_date_for_shop;
    /**
      * $live_for_business Is this State available for businesses
      * @var bool
      */
    protected $live_for_business;
    /**
      * $live_for_consumers Is this State available for individuals
      * @var bool
      */
    protected $live_for_consumers;

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        
        
        if ($data != null) {
            $this->id = $data["id"];
            $this->name = $data["name"];
            $this->code = $data["code"];
            $this->fips_number = $data["fips_number"];
            $this->last_date_for_individual = $data["last_date_for_individual"];
            $this->last_date_for_shop = $data["last_date_for_shop"];
            $this->live_for_business = $data["live_for_business"];
            $this->live_for_consumers = $data["live_for_consumers"];
        }
    }
    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->id;
    }
  
    /**
     * Sets id
     * @param int $id Primary Key of State
     * @return $this
     */
    public function setId($id)
    {
        
        $this->id = $id;
        return $this;
    }
    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->name;
    }
  
    /**
     * Sets name
     * @param string $name Name of state
     * @return $this
     */
    public function setName($name)
    {
        
        $this->name = $name;
        return $this;
    }
    /**
     * Gets code
     * @return string
     */
    public function getCode()
    {
        return $this->code;
    }
  
    /**
     * Sets code
     * @param string $code 2 letter code for state
     * @return $this
     */
    public function setCode($code)
    {
        
        $this->code = $code;
        return $this;
    }
    /**
     * Gets fips_number
     * @return string
     */
    public function getFipsNumber()
    {
        return $this->fips_number;
    }
  
    /**
     * Sets fips_number
     * @param string $fips_number National FIPs number
     * @return $this
     */
    public function setFipsNumber($fips_number)
    {
        
        $this->fips_number = $fips_number;
        return $this;
    }
    /**
     * Gets last_date_for_individual
     * @return \DateTime
     */
    public function getLastDateForIndividual()
    {
        return $this->last_date_for_individual;
    }
  
    /**
     * Sets last_date_for_individual
     * @param \DateTime $last_date_for_individual Last date this state is live for individuals
     * @return $this
     */
    public function setLastDateForIndividual($last_date_for_individual)
    {
        
        $this->last_date_for_individual = $last_date_for_individual;
        return $this;
    }
    /**
     * Gets last_date_for_shop
     * @return \DateTime
     */
    public function getLastDateForShop()
    {
        return $this->last_date_for_shop;
    }
  
    /**
     * Sets last_date_for_shop
     * @param \DateTime $last_date_for_shop Last date this state is live for shop
     * @return $this
     */
    public function setLastDateForShop($last_date_for_shop)
    {
        
        $this->last_date_for_shop = $last_date_for_shop;
        return $this;
    }
    /**
     * Gets live_for_business
     * @return bool
     */
    public function getLiveForBusiness()
    {
        return $this->live_for_business;
    }
  
    /**
     * Sets live_for_business
     * @param bool $live_for_business Is this State available for businesses
     * @return $this
     */
    public function setLiveForBusiness($live_for_business)
    {
        
        $this->live_for_business = $live_for_business;
        return $this;
    }
    /**
     * Gets live_for_consumers
     * @return bool
     */
    public function getLiveForConsumers()
    {
        return $this->live_for_consumers;
    }
  
    /**
     * Sets live_for_consumers
     * @param bool $live_for_consumers Is this State available for individuals
     * @return $this
     */
    public function setLiveForConsumers($live_for_consumers)
    {
        
        $this->live_for_consumers = $live_for_consumers;
        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Vericred\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Vericred\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}
