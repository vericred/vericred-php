<?php
/**
 * Provider
 *
 * PHP version 5
 *
 * @category Class
 * @package  Vericred\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
/**
 * Provider Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     Vericred\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Provider implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    static $swaggerModelName = 'Provider';

    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'accepting_change_of_payor_patients' => 'bool',
        'accepting_medicaid_patients' => 'bool',
        'accepting_medicare_patients' => 'bool',
        'accepting_private_patients' => 'bool',
        'accepting_referral_patients' => 'bool',
        'city' => 'string',
        'email' => 'string',
        'gender' => 'string',
        'first_name' => 'string',
        'id' => 'int',
        'last_name' => 'string',
        'middle_name' => 'string',
        'personal_phone' => 'string',
        'phone' => 'string',
        'presentation_name' => 'string',
        'specialty' => 'string',
        'state' => 'string',
        'state_id' => 'int',
        'street_line_1' => 'string',
        'street_line_2' => 'string',
        'suffix' => 'string',
        'title' => 'string',
        'type' => 'string',
        'zip_code' => 'string'
    );
  
    static function swaggerTypes() {
        return self::$swaggerTypes;
    }

    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'accepting_change_of_payor_patients' => 'accepting_change_of_payor_patients',
        'accepting_medicaid_patients' => 'accepting_medicaid_patients',
        'accepting_medicare_patients' => 'accepting_medicare_patients',
        'accepting_private_patients' => 'accepting_private_patients',
        'accepting_referral_patients' => 'accepting_referral_patients',
        'city' => 'city',
        'email' => 'email',
        'gender' => 'gender',
        'first_name' => 'first_name',
        'id' => 'id',
        'last_name' => 'last_name',
        'middle_name' => 'middle_name',
        'personal_phone' => 'personal_phone',
        'phone' => 'phone',
        'presentation_name' => 'presentation_name',
        'specialty' => 'specialty',
        'state' => 'state',
        'state_id' => 'state_id',
        'street_line_1' => 'street_line_1',
        'street_line_2' => 'street_line_2',
        'suffix' => 'suffix',
        'title' => 'title',
        'type' => 'type',
        'zip_code' => 'zip_code'
    );
  
    static function attributeMap() {
        return self::$attributeMap;
    }

    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'accepting_change_of_payor_patients' => 'setAcceptingChangeOfPayorPatients',
        'accepting_medicaid_patients' => 'setAcceptingMedicaidPatients',
        'accepting_medicare_patients' => 'setAcceptingMedicarePatients',
        'accepting_private_patients' => 'setAcceptingPrivatePatients',
        'accepting_referral_patients' => 'setAcceptingReferralPatients',
        'city' => 'setCity',
        'email' => 'setEmail',
        'gender' => 'setGender',
        'first_name' => 'setFirstName',
        'id' => 'setId',
        'last_name' => 'setLastName',
        'middle_name' => 'setMiddleName',
        'personal_phone' => 'setPersonalPhone',
        'phone' => 'setPhone',
        'presentation_name' => 'setPresentationName',
        'specialty' => 'setSpecialty',
        'state' => 'setState',
        'state_id' => 'setStateId',
        'street_line_1' => 'setStreetLine1',
        'street_line_2' => 'setStreetLine2',
        'suffix' => 'setSuffix',
        'title' => 'setTitle',
        'type' => 'setType',
        'zip_code' => 'setZipCode'
    );
  
    static function setters() {
        return self::$setters;
    }

    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'accepting_change_of_payor_patients' => 'getAcceptingChangeOfPayorPatients',
        'accepting_medicaid_patients' => 'getAcceptingMedicaidPatients',
        'accepting_medicare_patients' => 'getAcceptingMedicarePatients',
        'accepting_private_patients' => 'getAcceptingPrivatePatients',
        'accepting_referral_patients' => 'getAcceptingReferralPatients',
        'city' => 'getCity',
        'email' => 'getEmail',
        'gender' => 'getGender',
        'first_name' => 'getFirstName',
        'id' => 'getId',
        'last_name' => 'getLastName',
        'middle_name' => 'getMiddleName',
        'personal_phone' => 'getPersonalPhone',
        'phone' => 'getPhone',
        'presentation_name' => 'getPresentationName',
        'specialty' => 'getSpecialty',
        'state' => 'getState',
        'state_id' => 'getStateId',
        'street_line_1' => 'getStreetLine1',
        'street_line_2' => 'getStreetLine2',
        'suffix' => 'getSuffix',
        'title' => 'getTitle',
        'type' => 'getType',
        'zip_code' => 'getZipCode'
    );
  
    static function getters() {
        return self::$getters;
    }

    /**
      * $accepting_change_of_payor_patients Is this provider accepting patients with a change of insurance?
      * @var bool
      */
    protected $accepting_change_of_payor_patients;
    /**
      * $accepting_medicaid_patients Is this provider accepting new Medicaid patients?
      * @var bool
      */
    protected $accepting_medicaid_patients;
    /**
      * $accepting_medicare_patients Is this provider accepting new Medicare patients?
      * @var bool
      */
    protected $accepting_medicare_patients;
    /**
      * $accepting_private_patients Is this provider accepting new patients with private insurance?
      * @var bool
      */
    protected $accepting_private_patients;
    /**
      * $accepting_referral_patients Is this provider accepting new patients via referrals?
      * @var bool
      */
    protected $accepting_referral_patients;
    /**
      * $city City name (e.g. Springfield).
      * @var string
      */
    protected $city;
    /**
      * $email Primary email address to contact the provider.
      * @var string
      */
    protected $email;
    /**
      * $gender Provider's gender (M or F)
      * @var string
      */
    protected $gender;
    /**
      * $first_name Given name for the provider.
      * @var string
      */
    protected $first_name;
    /**
      * $id National Provider Index (NPI) number
      * @var int
      */
    protected $id;
    /**
      * $last_name Family name for the provider.
      * @var string
      */
    protected $last_name;
    /**
      * $middle_name Middle name for the provider.
      * @var string
      */
    protected $middle_name;
    /**
      * $personal_phone Personal contact phone for the provider.
      * @var string
      */
    protected $personal_phone;
    /**
      * $phone Office phone for the provider
      * @var string
      */
    protected $phone;
    /**
      * $presentation_name Preferred name for display (e.g. Dr. Francis White may prefer Dr. Frank White)
      * @var string
      */
    protected $presentation_name;
    /**
      * $specialty Name of the primary Specialty
      * @var string
      */
    protected $specialty;
    /**
      * $state State code for the provider's address (e.g. NY).
      * @var string
      */
    protected $state;
    /**
      * $state_id Foreign key to States
      * @var int
      */
    protected $state_id;
    /**
      * $street_line_1 First line of the provider's street address.
      * @var string
      */
    protected $street_line_1;
    /**
      * $street_line_2 Second line of the provider's street address.
      * @var string
      */
    protected $street_line_2;
    /**
      * $suffix Suffix for the provider's name (e.g. Jr)
      * @var string
      */
    protected $suffix;
    /**
      * $title Professional title for the provider (e.g. Dr).
      * @var string
      */
    protected $title;
    /**
      * $type Type of NPI number (individual provider vs organization).
      * @var string
      */
    protected $type;
    /**
      * $zip_code Postal code for the provider's address (e.g. 11215)
      * @var string
      */
    protected $zip_code;

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        
        
        if ($data != null) {
            $this->accepting_change_of_payor_patients = $data["accepting_change_of_payor_patients"];
            $this->accepting_medicaid_patients = $data["accepting_medicaid_patients"];
            $this->accepting_medicare_patients = $data["accepting_medicare_patients"];
            $this->accepting_private_patients = $data["accepting_private_patients"];
            $this->accepting_referral_patients = $data["accepting_referral_patients"];
            $this->city = $data["city"];
            $this->email = $data["email"];
            $this->gender = $data["gender"];
            $this->first_name = $data["first_name"];
            $this->id = $data["id"];
            $this->last_name = $data["last_name"];
            $this->middle_name = $data["middle_name"];
            $this->personal_phone = $data["personal_phone"];
            $this->phone = $data["phone"];
            $this->presentation_name = $data["presentation_name"];
            $this->specialty = $data["specialty"];
            $this->state = $data["state"];
            $this->state_id = $data["state_id"];
            $this->street_line_1 = $data["street_line_1"];
            $this->street_line_2 = $data["street_line_2"];
            $this->suffix = $data["suffix"];
            $this->title = $data["title"];
            $this->type = $data["type"];
            $this->zip_code = $data["zip_code"];
        }
    }
    /**
     * Gets accepting_change_of_payor_patients
     * @return bool
     */
    public function getAcceptingChangeOfPayorPatients()
    {
        return $this->accepting_change_of_payor_patients;
    }
  
    /**
     * Sets accepting_change_of_payor_patients
     * @param bool $accepting_change_of_payor_patients Is this provider accepting patients with a change of insurance?
     * @return $this
     */
    public function setAcceptingChangeOfPayorPatients($accepting_change_of_payor_patients)
    {
        
        $this->accepting_change_of_payor_patients = $accepting_change_of_payor_patients;
        return $this;
    }
    /**
     * Gets accepting_medicaid_patients
     * @return bool
     */
    public function getAcceptingMedicaidPatients()
    {
        return $this->accepting_medicaid_patients;
    }
  
    /**
     * Sets accepting_medicaid_patients
     * @param bool $accepting_medicaid_patients Is this provider accepting new Medicaid patients?
     * @return $this
     */
    public function setAcceptingMedicaidPatients($accepting_medicaid_patients)
    {
        
        $this->accepting_medicaid_patients = $accepting_medicaid_patients;
        return $this;
    }
    /**
     * Gets accepting_medicare_patients
     * @return bool
     */
    public function getAcceptingMedicarePatients()
    {
        return $this->accepting_medicare_patients;
    }
  
    /**
     * Sets accepting_medicare_patients
     * @param bool $accepting_medicare_patients Is this provider accepting new Medicare patients?
     * @return $this
     */
    public function setAcceptingMedicarePatients($accepting_medicare_patients)
    {
        
        $this->accepting_medicare_patients = $accepting_medicare_patients;
        return $this;
    }
    /**
     * Gets accepting_private_patients
     * @return bool
     */
    public function getAcceptingPrivatePatients()
    {
        return $this->accepting_private_patients;
    }
  
    /**
     * Sets accepting_private_patients
     * @param bool $accepting_private_patients Is this provider accepting new patients with private insurance?
     * @return $this
     */
    public function setAcceptingPrivatePatients($accepting_private_patients)
    {
        
        $this->accepting_private_patients = $accepting_private_patients;
        return $this;
    }
    /**
     * Gets accepting_referral_patients
     * @return bool
     */
    public function getAcceptingReferralPatients()
    {
        return $this->accepting_referral_patients;
    }
  
    /**
     * Sets accepting_referral_patients
     * @param bool $accepting_referral_patients Is this provider accepting new patients via referrals?
     * @return $this
     */
    public function setAcceptingReferralPatients($accepting_referral_patients)
    {
        
        $this->accepting_referral_patients = $accepting_referral_patients;
        return $this;
    }
    /**
     * Gets city
     * @return string
     */
    public function getCity()
    {
        return $this->city;
    }
  
    /**
     * Sets city
     * @param string $city City name (e.g. Springfield).
     * @return $this
     */
    public function setCity($city)
    {
        
        $this->city = $city;
        return $this;
    }
    /**
     * Gets email
     * @return string
     */
    public function getEmail()
    {
        return $this->email;
    }
  
    /**
     * Sets email
     * @param string $email Primary email address to contact the provider.
     * @return $this
     */
    public function setEmail($email)
    {
        
        $this->email = $email;
        return $this;
    }
    /**
     * Gets gender
     * @return string
     */
    public function getGender()
    {
        return $this->gender;
    }
  
    /**
     * Sets gender
     * @param string $gender Provider's gender (M or F)
     * @return $this
     */
    public function setGender($gender)
    {
        
        $this->gender = $gender;
        return $this;
    }
    /**
     * Gets first_name
     * @return string
     */
    public function getFirstName()
    {
        return $this->first_name;
    }
  
    /**
     * Sets first_name
     * @param string $first_name Given name for the provider.
     * @return $this
     */
    public function setFirstName($first_name)
    {
        
        $this->first_name = $first_name;
        return $this;
    }
    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->id;
    }
  
    /**
     * Sets id
     * @param int $id National Provider Index (NPI) number
     * @return $this
     */
    public function setId($id)
    {
        
        $this->id = $id;
        return $this;
    }
    /**
     * Gets last_name
     * @return string
     */
    public function getLastName()
    {
        return $this->last_name;
    }
  
    /**
     * Sets last_name
     * @param string $last_name Family name for the provider.
     * @return $this
     */
    public function setLastName($last_name)
    {
        
        $this->last_name = $last_name;
        return $this;
    }
    /**
     * Gets middle_name
     * @return string
     */
    public function getMiddleName()
    {
        return $this->middle_name;
    }
  
    /**
     * Sets middle_name
     * @param string $middle_name Middle name for the provider.
     * @return $this
     */
    public function setMiddleName($middle_name)
    {
        
        $this->middle_name = $middle_name;
        return $this;
    }
    /**
     * Gets personal_phone
     * @return string
     */
    public function getPersonalPhone()
    {
        return $this->personal_phone;
    }
  
    /**
     * Sets personal_phone
     * @param string $personal_phone Personal contact phone for the provider.
     * @return $this
     */
    public function setPersonalPhone($personal_phone)
    {
        
        $this->personal_phone = $personal_phone;
        return $this;
    }
    /**
     * Gets phone
     * @return string
     */
    public function getPhone()
    {
        return $this->phone;
    }
  
    /**
     * Sets phone
     * @param string $phone Office phone for the provider
     * @return $this
     */
    public function setPhone($phone)
    {
        
        $this->phone = $phone;
        return $this;
    }
    /**
     * Gets presentation_name
     * @return string
     */
    public function getPresentationName()
    {
        return $this->presentation_name;
    }
  
    /**
     * Sets presentation_name
     * @param string $presentation_name Preferred name for display (e.g. Dr. Francis White may prefer Dr. Frank White)
     * @return $this
     */
    public function setPresentationName($presentation_name)
    {
        
        $this->presentation_name = $presentation_name;
        return $this;
    }
    /**
     * Gets specialty
     * @return string
     */
    public function getSpecialty()
    {
        return $this->specialty;
    }
  
    /**
     * Sets specialty
     * @param string $specialty Name of the primary Specialty
     * @return $this
     */
    public function setSpecialty($specialty)
    {
        
        $this->specialty = $specialty;
        return $this;
    }
    /**
     * Gets state
     * @return string
     */
    public function getState()
    {
        return $this->state;
    }
  
    /**
     * Sets state
     * @param string $state State code for the provider's address (e.g. NY).
     * @return $this
     */
    public function setState($state)
    {
        
        $this->state = $state;
        return $this;
    }
    /**
     * Gets state_id
     * @return int
     */
    public function getStateId()
    {
        return $this->state_id;
    }
  
    /**
     * Sets state_id
     * @param int $state_id Foreign key to States
     * @return $this
     */
    public function setStateId($state_id)
    {
        
        $this->state_id = $state_id;
        return $this;
    }
    /**
     * Gets street_line_1
     * @return string
     */
    public function getStreetLine1()
    {
        return $this->street_line_1;
    }
  
    /**
     * Sets street_line_1
     * @param string $street_line_1 First line of the provider's street address.
     * @return $this
     */
    public function setStreetLine1($street_line_1)
    {
        
        $this->street_line_1 = $street_line_1;
        return $this;
    }
    /**
     * Gets street_line_2
     * @return string
     */
    public function getStreetLine2()
    {
        return $this->street_line_2;
    }
  
    /**
     * Sets street_line_2
     * @param string $street_line_2 Second line of the provider's street address.
     * @return $this
     */
    public function setStreetLine2($street_line_2)
    {
        
        $this->street_line_2 = $street_line_2;
        return $this;
    }
    /**
     * Gets suffix
     * @return string
     */
    public function getSuffix()
    {
        return $this->suffix;
    }
  
    /**
     * Sets suffix
     * @param string $suffix Suffix for the provider's name (e.g. Jr)
     * @return $this
     */
    public function setSuffix($suffix)
    {
        
        $this->suffix = $suffix;
        return $this;
    }
    /**
     * Gets title
     * @return string
     */
    public function getTitle()
    {
        return $this->title;
    }
  
    /**
     * Sets title
     * @param string $title Professional title for the provider (e.g. Dr).
     * @return $this
     */
    public function setTitle($title)
    {
        
        $this->title = $title;
        return $this;
    }
    /**
     * Gets type
     * @return string
     */
    public function getType()
    {
        return $this->type;
    }
  
    /**
     * Sets type
     * @param string $type Type of NPI number (individual provider vs organization).
     * @return $this
     */
    public function setType($type)
    {
        
        $this->type = $type;
        return $this;
    }
    /**
     * Gets zip_code
     * @return string
     */
    public function getZipCode()
    {
        return $this->zip_code;
    }
  
    /**
     * Sets zip_code
     * @param string $zip_code Postal code for the provider's address (e.g. 11215)
     * @return $this
     */
    public function setZipCode($zip_code)
    {
        
        $this->zip_code = $zip_code;
        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Vericred\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Vericred\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}
