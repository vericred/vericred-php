<?php
/**
 * ACAPlan2018
 *
 * PHP version 5
 *
 * @category Class
 * @package  Vericred\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/*
 * Vericred API
 *
 */

/*
 Vericred's API allows you to search for Health Plans that a specific doctor
accepts.

## Getting Started

Visit our [Developer Portal](https://developers.vericred.com) to
create an account.

Once you have created an account, you can create one Application for
Production and another for our Sandbox (select the appropriate Plan when
you create the Application).

## SDKs

Our API follows standard REST conventions, so you can use any HTTP client
to integrate with us. You will likely find it easier to use one of our
[autogenerated SDKs](https://github.com/vericred/?query=vericred-),
which we make available for several common programming languages.

## Authentication

To authenticate, pass the API Key you created in the Developer Portal as
a `Vericred-Api-Key` header.

`curl -H 'Vericred-Api-Key: YOUR_KEY' "https://api.vericred.com/providers?search_term=Foo&zip_code=11215"`

## Versioning

Vericred's API default to the latest version.  However, if you need a specific
version, you can request it with an `Accept-Version` header.

The current version is `v3`.  Previous versions are `v1` and `v2`.

`curl -H 'Vericred-Api-Key: YOUR_KEY' -H 'Accept-Version: v2' "https://api.vericred.com/providers?search_term=Foo&zip_code=11215"`

## Pagination

Endpoints that accept `page` and `per_page` parameters are paginated. They expose
four additional fields that contain data about your position in the response,
namely `Total`, `Per-Page`, `Link`, and `Page` as described in [RFC-5988](https://tools.ietf.org/html/rfc5988).

For example, to display 5 results per page and view the second page of a
`GET` to `/networks`, your final request would be `GET /networks?....page=2&per_page=5`.

## Sideloading

When we return multiple levels of an object graph (e.g. `Provider`s and their `State`s
we sideload the associated data.  In this example, we would provide an Array of
`State`s and a `state_id` for each provider.  This is done primarily to reduce the
payload size since many of the `Provider`s will share a `State`

```
{
  providers: [{ id: 1, state_id: 1}, { id: 2, state_id: 1 }],
  states: [{ id: 1, code: 'NY' }]
}
```

If you need the second level of the object graph, you can just match the
corresponding id.

## Selecting specific data

All endpoints allow you to specify which fields you would like to return.
This allows you to limit the response to contain only the data you need.

For example, let's take a request that returns the following JSON by default

```
{
  provider: {
    id: 1,
    name: 'John',
    phone: '1234567890',
    field_we_dont_care_about: 'value_we_dont_care_about'
  },
  states: [{
    id: 1,
    name: 'New York',
    code: 'NY',
    field_we_dont_care_about: 'value_we_dont_care_about'
  }]
}
```

To limit our results to only return the fields we care about, we specify the
`select` query string parameter for the corresponding fields in the JSON
document.

In this case, we want to select `name` and `phone` from the `provider` key,
so we would add the parameters `select=provider.name,provider.phone`.
We also want the `name` and `code` from the `states` key, so we would
add the parameters `select=states.name,states.code`.  The id field of
each document is always returned whether or not it is requested.

Our final request would be `GET /providers/12345?select=provider.name,provider.phone,states.name,states.code`

The response would be

```
{
  provider: {
    id: 1,
    name: 'John',
    phone: '1234567890'
  },
  states: [{
    id: 1,
    name: 'New York',
    code: 'NY'
  }]
}
```

## Benefits summary format
Benefit cost-share strings are formatted to capture:
 * Network tiers
 * Compound or conditional cost-share
 * Limits on the cost-share
 * Benefit-specific maximum out-of-pocket costs

**Example #1**
As an example, we would represent [this Summary of Benefits &amp; Coverage](https://s3.amazonaws.com/vericred-data/SBC/2017/33602TX0780032.pdf) as:

* **Hospital stay facility fees**:
  - Network Provider: `$400 copay/admit plus 20% coinsurance`
  - Out-of-Network Provider: `$1,500 copay/admit plus 50% coinsurance`
  - Vericred's format for this benefit: `In-Network: $400 before deductible then 20% after deductible / Out-of-Network: $1,500 before deductible then 50% after deductible`

* **Rehabilitation services:**
  - Network Provider: `20% coinsurance`
  - Out-of-Network Provider: `50% coinsurance`
  - Limitations & Exceptions: `35 visit maximum per benefit period combined with Chiropractic care.`
  - Vericred's format for this benefit: `In-Network: 20% after deductible / Out-of-Network: 50% after deductible | limit: 35 visit(s) per Benefit Period`

**Example #2**
In [this other Summary of Benefits &amp; Coverage](https://s3.amazonaws.com/vericred-data/SBC/2017/40733CA0110568.pdf), the **specialty_drugs** cost-share has a maximum out-of-pocket for in-network pharmacies.
* **Specialty drugs:**
  - Network Provider: `40% coinsurance up to a $500 maximum for up to a 30 day supply`
  - Out-of-Network Provider `Not covered`
  - Vericred's format for this benefit: `In-Network: 40% after deductible, up to $500 per script / Out-of-Network: 100%`

**BNF**

Here's a description of the benefits summary string, represented as a context-free grammar:

```
root                      ::= coverage

coverage                  ::= (simple_coverage | tiered_coverage) (space pipe space coverage_modifier)?
tiered_coverage           ::= tier (space slash space tier)*
tier                      ::= tier_name colon space (tier_coverage | not_applicable)
tier_coverage             ::= simple_coverage (space (then | or | and) space simple_coverage)* tier_limitation?
simple_coverage           ::= (pre_coverage_limitation space)? coverage_amount (space post_coverage_limitation)? (comma? space coverage_condition)?
coverage_modifier         ::= limit_condition colon space (((simple_coverage | simple_limitation) (semicolon space see_carrier_documentation)?) | see_carrier_documentation | waived_if_admitted | shared_across_tiers)
waived_if_admitted        ::= ("copay" space)? "waived if admitted"
simple_limitation         ::= pre_coverage_limitation space "copay applies"
tier_name                 ::= "In-Network-Tier-2" | "Out-of-Network" | "In-Network"
limit_condition           ::= "limit" | "condition"
tier_limitation           ::= comma space "up to" space (currency | (integer space time_unit plural?)) (space post_coverage_limitation)?
coverage_amount           ::= currency | unlimited | included | unknown | percentage | (digits space (treatment_unit | time_unit) plural?)
pre_coverage_limitation   ::= first space digits space time_unit plural?
post_coverage_limitation  ::= (((then space currency) | "per condition") space)? "per" space (treatment_unit | (integer space time_unit) | time_unit) plural?
coverage_condition        ::= ("before deductible" | "after deductible" | "penalty" | allowance | "in-state" | "out-of-state") (space allowance)?
allowance                 ::= upto_allowance | after_allowance
upto_allowance            ::= "up to" space (currency space)? "allowance"
after_allowance           ::= "after" space (currency space)? "allowance"
see_carrier_documentation ::= "see carrier documentation for more information"
shared_across_tiers       ::= "shared across all tiers"
unknown                   ::= "unknown"
unlimited                 ::= /[uU]nlimited/
included                  ::= /[iI]ncluded in [mM]edical/
time_unit                 ::= /[hH]our/ | (((/[cC]alendar/ | /[cC]ontract/) space)? /[yY]ear/) | /[mM]onth/ | /[dD]ay/ | /[wW]eek/ | /[vV]isit/ | /[lL]ifetime/ | ((((/[bB]enefit/ plural?) | /[eE]ligibility/) space)? /[pP]eriod/)
treatment_unit            ::= /[pP]erson/ | /[gG]roup/ | /[cC]ondition/ | /[sS]cript/ | /[vV]isit/ | /[eE]xam/ | /[iI]tem/ | /[sS]tay/ | /[tT]reatment/ | /[aA]dmission/ | /[eE]pisode/
comma                     ::= ","
colon                     ::= ":"
semicolon                 ::= ";"
pipe                      ::= "|"
slash                     ::= "/"
plural                    ::= "(s)" | "s"
then                      ::= "then" | ("," space) | space
or                        ::= "or"
and                       ::= "and"
not_applicable            ::= "Not Applicable" | "N/A" | "NA"
first                     ::= "first"
currency                  ::= "$" number
percentage                ::= number "%"
number                    ::= float | integer
float                     ::= digits "." digits
integer                   ::= /[0-9]/+ (comma_int | under_int)*
comma_int                 ::= ("," /[0-9]/*3) !"_"
under_int                 ::= ("_" /[0-9]/*3) !","
digits                    ::= /[0-9]/+ ("_" /[0-9]/+)*
space                     ::= /[ \t]/+
```


*/


/* OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * ACAPlan2018 Class Doc Comment
 *
 * @category    Class */
/** 
 * @package     Vericred\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class ACAPlan2018 implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'ACAPlan2018';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'carrier_name' => 'string',
        'display_name' => 'string',
        'effective_date' => 'string',
        'expiration_date' => 'string',
        'identifiers' => '\Swagger\Client\Model\PlanIdentifier[]',
        'name' => 'string',
        'network_ids' => 'int[]',
        'network_size' => 'int',
        'plan_type' => 'string',
        'service_area_id' => 'string',
        'source' => 'string',
        'type' => 'string',
        'adult_dental' => 'bool',
        'age29_rider' => 'bool',
        'ambulance' => 'string',
        'benefits_summary_url' => 'string',
        'buy_link' => 'string',
        'child_dental' => 'bool',
        'child_eyewear' => 'string',
        'child_eye_exam' => 'string',
        'customer_service_phone_number' => 'string',
        'durable_medical_equipment' => 'string',
        'diagnostic_test' => 'string',
        'dp_rider' => 'bool',
        'drug_formulary_url' => 'string',
        'emergency_room' => 'string',
        'family_drug_deductible' => 'string',
        'family_drug_moop' => 'string',
        'family_medical_deductible' => 'string',
        'family_medical_moop' => 'string',
        'fp_rider' => 'bool',
        'generic_drugs' => 'string',
        'habilitation_services' => 'string',
        'hios_issuer_id' => 'string',
        'home_health_care' => 'string',
        'hospice_service' => 'string',
        'hsa_eligible' => 'bool',
        'id' => 'string',
        'imaging' => 'string',
        'individual_drug_deductible' => 'string',
        'individual_drug_moop' => 'string',
        'individual_medical_deductible' => 'string',
        'individual_medical_moop' => 'string',
        'inpatient_birth' => 'string',
        'inpatient_facility' => 'string',
        'inpatient_mental_health' => 'string',
        'inpatient_physician' => 'string',
        'inpatient_substance' => 'string',
        'in_network_ids' => 'int[]',
        'level' => 'string',
        'logo_url' => 'string',
        'non_preferred_brand_drugs' => 'string',
        'on_market' => 'bool',
        'off_market' => 'bool',
        'out_of_network_coverage' => 'bool',
        'out_of_network_ids' => 'int[]',
        'outpatient_facility' => 'string',
        'outpatient_mental_health' => 'string',
        'outpatient_physician' => 'string',
        'outpatient_substance' => 'string',
        'plan_market' => 'string',
        'preferred_brand_drugs' => 'string',
        'prenatal_postnatal_care' => 'string',
        'preventative_care' => 'string',
        'premium_subsidized' => 'float',
        'premium' => 'float',
        'premium_source' => 'string',
        'primary_care_physician' => 'string',
        'rehabilitation_services' => 'string',
        'skilled_nursing' => 'string',
        'specialist' => 'string',
        'specialty_drugs' => 'string',
        'urgent_care' => 'string',
        'actuarial_value' => 'float',
        'chiropractic_services' => 'string',
        'coinsurance' => 'float',
        'embedded_deductible' => 'string',
        'gated' => 'bool',
        'imaging_center' => 'string',
        'imaging_physician' => 'string',
        'lab_test' => 'string',
        'mail_order_rx' => 'float',
        'nonpreferred_generic_drug_share' => 'string',
        'nonpreferred_specialty_drug_share' => 'string',
        'outpatient_ambulatory_care_center' => 'string',
        'plan_calendar' => 'string',
        'prenatal_care' => 'string',
        'postnatal_care' => 'string',
        'skilled_nursing_facility_365' => 'string',
        'essential_health_benefits_percentage' => 'float'
    );

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'carrier_name' => 'carrier_name',
        'display_name' => 'display_name',
        'effective_date' => 'effective_date',
        'expiration_date' => 'expiration_date',
        'identifiers' => 'identifiers',
        'name' => 'name',
        'network_ids' => 'network_ids',
        'network_size' => 'network_size',
        'plan_type' => 'plan_type',
        'service_area_id' => 'service_area_id',
        'source' => 'source',
        'type' => 'type',
        'adult_dental' => 'adult_dental',
        'age29_rider' => 'age29_rider',
        'ambulance' => 'ambulance',
        'benefits_summary_url' => 'benefits_summary_url',
        'buy_link' => 'buy_link',
        'child_dental' => 'child_dental',
        'child_eyewear' => 'child_eyewear',
        'child_eye_exam' => 'child_eye_exam',
        'customer_service_phone_number' => 'customer_service_phone_number',
        'durable_medical_equipment' => 'durable_medical_equipment',
        'diagnostic_test' => 'diagnostic_test',
        'dp_rider' => 'dp_rider',
        'drug_formulary_url' => 'drug_formulary_url',
        'emergency_room' => 'emergency_room',
        'family_drug_deductible' => 'family_drug_deductible',
        'family_drug_moop' => 'family_drug_moop',
        'family_medical_deductible' => 'family_medical_deductible',
        'family_medical_moop' => 'family_medical_moop',
        'fp_rider' => 'fp_rider',
        'generic_drugs' => 'generic_drugs',
        'habilitation_services' => 'habilitation_services',
        'hios_issuer_id' => 'hios_issuer_id',
        'home_health_care' => 'home_health_care',
        'hospice_service' => 'hospice_service',
        'hsa_eligible' => 'hsa_eligible',
        'id' => 'id',
        'imaging' => 'imaging',
        'individual_drug_deductible' => 'individual_drug_deductible',
        'individual_drug_moop' => 'individual_drug_moop',
        'individual_medical_deductible' => 'individual_medical_deductible',
        'individual_medical_moop' => 'individual_medical_moop',
        'inpatient_birth' => 'inpatient_birth',
        'inpatient_facility' => 'inpatient_facility',
        'inpatient_mental_health' => 'inpatient_mental_health',
        'inpatient_physician' => 'inpatient_physician',
        'inpatient_substance' => 'inpatient_substance',
        'in_network_ids' => 'in_network_ids',
        'level' => 'level',
        'logo_url' => 'logo_url',
        'non_preferred_brand_drugs' => 'non_preferred_brand_drugs',
        'on_market' => 'on_market',
        'off_market' => 'off_market',
        'out_of_network_coverage' => 'out_of_network_coverage',
        'out_of_network_ids' => 'out_of_network_ids',
        'outpatient_facility' => 'outpatient_facility',
        'outpatient_mental_health' => 'outpatient_mental_health',
        'outpatient_physician' => 'outpatient_physician',
        'outpatient_substance' => 'outpatient_substance',
        'plan_market' => 'plan_market',
        'preferred_brand_drugs' => 'preferred_brand_drugs',
        'prenatal_postnatal_care' => 'prenatal_postnatal_care',
        'preventative_care' => 'preventative_care',
        'premium_subsidized' => 'premium_subsidized',
        'premium' => 'premium',
        'premium_source' => 'premium_source',
        'primary_care_physician' => 'primary_care_physician',
        'rehabilitation_services' => 'rehabilitation_services',
        'skilled_nursing' => 'skilled_nursing',
        'specialist' => 'specialist',
        'specialty_drugs' => 'specialty_drugs',
        'urgent_care' => 'urgent_care',
        'actuarial_value' => 'actuarial_value',
        'chiropractic_services' => 'chiropractic_services',
        'coinsurance' => 'coinsurance',
        'embedded_deductible' => 'embedded_deductible',
        'gated' => 'gated',
        'imaging_center' => 'imaging_center',
        'imaging_physician' => 'imaging_physician',
        'lab_test' => 'lab_test',
        'mail_order_rx' => 'mail_order_rx',
        'nonpreferred_generic_drug_share' => 'nonpreferred_generic_drug_share',
        'nonpreferred_specialty_drug_share' => 'nonpreferred_specialty_drug_share',
        'outpatient_ambulatory_care_center' => 'outpatient_ambulatory_care_center',
        'plan_calendar' => 'plan_calendar',
        'prenatal_care' => 'prenatal_care',
        'postnatal_care' => 'postnatal_care',
        'skilled_nursing_facility_365' => 'skilled_nursing_facility_365',
        'essential_health_benefits_percentage' => 'essential_health_benefits_percentage'
    );

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'carrier_name' => 'setCarrierName',
        'display_name' => 'setDisplayName',
        'effective_date' => 'setEffectiveDate',
        'expiration_date' => 'setExpirationDate',
        'identifiers' => 'setIdentifiers',
        'name' => 'setName',
        'network_ids' => 'setNetworkIds',
        'network_size' => 'setNetworkSize',
        'plan_type' => 'setPlanType',
        'service_area_id' => 'setServiceAreaId',
        'source' => 'setSource',
        'type' => 'setType',
        'adult_dental' => 'setAdultDental',
        'age29_rider' => 'setAge29Rider',
        'ambulance' => 'setAmbulance',
        'benefits_summary_url' => 'setBenefitsSummaryUrl',
        'buy_link' => 'setBuyLink',
        'child_dental' => 'setChildDental',
        'child_eyewear' => 'setChildEyewear',
        'child_eye_exam' => 'setChildEyeExam',
        'customer_service_phone_number' => 'setCustomerServicePhoneNumber',
        'durable_medical_equipment' => 'setDurableMedicalEquipment',
        'diagnostic_test' => 'setDiagnosticTest',
        'dp_rider' => 'setDpRider',
        'drug_formulary_url' => 'setDrugFormularyUrl',
        'emergency_room' => 'setEmergencyRoom',
        'family_drug_deductible' => 'setFamilyDrugDeductible',
        'family_drug_moop' => 'setFamilyDrugMoop',
        'family_medical_deductible' => 'setFamilyMedicalDeductible',
        'family_medical_moop' => 'setFamilyMedicalMoop',
        'fp_rider' => 'setFpRider',
        'generic_drugs' => 'setGenericDrugs',
        'habilitation_services' => 'setHabilitationServices',
        'hios_issuer_id' => 'setHiosIssuerId',
        'home_health_care' => 'setHomeHealthCare',
        'hospice_service' => 'setHospiceService',
        'hsa_eligible' => 'setHsaEligible',
        'id' => 'setId',
        'imaging' => 'setImaging',
        'individual_drug_deductible' => 'setIndividualDrugDeductible',
        'individual_drug_moop' => 'setIndividualDrugMoop',
        'individual_medical_deductible' => 'setIndividualMedicalDeductible',
        'individual_medical_moop' => 'setIndividualMedicalMoop',
        'inpatient_birth' => 'setInpatientBirth',
        'inpatient_facility' => 'setInpatientFacility',
        'inpatient_mental_health' => 'setInpatientMentalHealth',
        'inpatient_physician' => 'setInpatientPhysician',
        'inpatient_substance' => 'setInpatientSubstance',
        'in_network_ids' => 'setInNetworkIds',
        'level' => 'setLevel',
        'logo_url' => 'setLogoUrl',
        'non_preferred_brand_drugs' => 'setNonPreferredBrandDrugs',
        'on_market' => 'setOnMarket',
        'off_market' => 'setOffMarket',
        'out_of_network_coverage' => 'setOutOfNetworkCoverage',
        'out_of_network_ids' => 'setOutOfNetworkIds',
        'outpatient_facility' => 'setOutpatientFacility',
        'outpatient_mental_health' => 'setOutpatientMentalHealth',
        'outpatient_physician' => 'setOutpatientPhysician',
        'outpatient_substance' => 'setOutpatientSubstance',
        'plan_market' => 'setPlanMarket',
        'preferred_brand_drugs' => 'setPreferredBrandDrugs',
        'prenatal_postnatal_care' => 'setPrenatalPostnatalCare',
        'preventative_care' => 'setPreventativeCare',
        'premium_subsidized' => 'setPremiumSubsidized',
        'premium' => 'setPremium',
        'premium_source' => 'setPremiumSource',
        'primary_care_physician' => 'setPrimaryCarePhysician',
        'rehabilitation_services' => 'setRehabilitationServices',
        'skilled_nursing' => 'setSkilledNursing',
        'specialist' => 'setSpecialist',
        'specialty_drugs' => 'setSpecialtyDrugs',
        'urgent_care' => 'setUrgentCare',
        'actuarial_value' => 'setActuarialValue',
        'chiropractic_services' => 'setChiropracticServices',
        'coinsurance' => 'setCoinsurance',
        'embedded_deductible' => 'setEmbeddedDeductible',
        'gated' => 'setGated',
        'imaging_center' => 'setImagingCenter',
        'imaging_physician' => 'setImagingPhysician',
        'lab_test' => 'setLabTest',
        'mail_order_rx' => 'setMailOrderRx',
        'nonpreferred_generic_drug_share' => 'setNonpreferredGenericDrugShare',
        'nonpreferred_specialty_drug_share' => 'setNonpreferredSpecialtyDrugShare',
        'outpatient_ambulatory_care_center' => 'setOutpatientAmbulatoryCareCenter',
        'plan_calendar' => 'setPlanCalendar',
        'prenatal_care' => 'setPrenatalCare',
        'postnatal_care' => 'setPostnatalCare',
        'skilled_nursing_facility_365' => 'setSkilledNursingFacility365',
        'essential_health_benefits_percentage' => 'setEssentialHealthBenefitsPercentage'
    );

    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'carrier_name' => 'getCarrierName',
        'display_name' => 'getDisplayName',
        'effective_date' => 'getEffectiveDate',
        'expiration_date' => 'getExpirationDate',
        'identifiers' => 'getIdentifiers',
        'name' => 'getName',
        'network_ids' => 'getNetworkIds',
        'network_size' => 'getNetworkSize',
        'plan_type' => 'getPlanType',
        'service_area_id' => 'getServiceAreaId',
        'source' => 'getSource',
        'type' => 'getType',
        'adult_dental' => 'getAdultDental',
        'age29_rider' => 'getAge29Rider',
        'ambulance' => 'getAmbulance',
        'benefits_summary_url' => 'getBenefitsSummaryUrl',
        'buy_link' => 'getBuyLink',
        'child_dental' => 'getChildDental',
        'child_eyewear' => 'getChildEyewear',
        'child_eye_exam' => 'getChildEyeExam',
        'customer_service_phone_number' => 'getCustomerServicePhoneNumber',
        'durable_medical_equipment' => 'getDurableMedicalEquipment',
        'diagnostic_test' => 'getDiagnosticTest',
        'dp_rider' => 'getDpRider',
        'drug_formulary_url' => 'getDrugFormularyUrl',
        'emergency_room' => 'getEmergencyRoom',
        'family_drug_deductible' => 'getFamilyDrugDeductible',
        'family_drug_moop' => 'getFamilyDrugMoop',
        'family_medical_deductible' => 'getFamilyMedicalDeductible',
        'family_medical_moop' => 'getFamilyMedicalMoop',
        'fp_rider' => 'getFpRider',
        'generic_drugs' => 'getGenericDrugs',
        'habilitation_services' => 'getHabilitationServices',
        'hios_issuer_id' => 'getHiosIssuerId',
        'home_health_care' => 'getHomeHealthCare',
        'hospice_service' => 'getHospiceService',
        'hsa_eligible' => 'getHsaEligible',
        'id' => 'getId',
        'imaging' => 'getImaging',
        'individual_drug_deductible' => 'getIndividualDrugDeductible',
        'individual_drug_moop' => 'getIndividualDrugMoop',
        'individual_medical_deductible' => 'getIndividualMedicalDeductible',
        'individual_medical_moop' => 'getIndividualMedicalMoop',
        'inpatient_birth' => 'getInpatientBirth',
        'inpatient_facility' => 'getInpatientFacility',
        'inpatient_mental_health' => 'getInpatientMentalHealth',
        'inpatient_physician' => 'getInpatientPhysician',
        'inpatient_substance' => 'getInpatientSubstance',
        'in_network_ids' => 'getInNetworkIds',
        'level' => 'getLevel',
        'logo_url' => 'getLogoUrl',
        'non_preferred_brand_drugs' => 'getNonPreferredBrandDrugs',
        'on_market' => 'getOnMarket',
        'off_market' => 'getOffMarket',
        'out_of_network_coverage' => 'getOutOfNetworkCoverage',
        'out_of_network_ids' => 'getOutOfNetworkIds',
        'outpatient_facility' => 'getOutpatientFacility',
        'outpatient_mental_health' => 'getOutpatientMentalHealth',
        'outpatient_physician' => 'getOutpatientPhysician',
        'outpatient_substance' => 'getOutpatientSubstance',
        'plan_market' => 'getPlanMarket',
        'preferred_brand_drugs' => 'getPreferredBrandDrugs',
        'prenatal_postnatal_care' => 'getPrenatalPostnatalCare',
        'preventative_care' => 'getPreventativeCare',
        'premium_subsidized' => 'getPremiumSubsidized',
        'premium' => 'getPremium',
        'premium_source' => 'getPremiumSource',
        'primary_care_physician' => 'getPrimaryCarePhysician',
        'rehabilitation_services' => 'getRehabilitationServices',
        'skilled_nursing' => 'getSkilledNursing',
        'specialist' => 'getSpecialist',
        'specialty_drugs' => 'getSpecialtyDrugs',
        'urgent_care' => 'getUrgentCare',
        'actuarial_value' => 'getActuarialValue',
        'chiropractic_services' => 'getChiropracticServices',
        'coinsurance' => 'getCoinsurance',
        'embedded_deductible' => 'getEmbeddedDeductible',
        'gated' => 'getGated',
        'imaging_center' => 'getImagingCenter',
        'imaging_physician' => 'getImagingPhysician',
        'lab_test' => 'getLabTest',
        'mail_order_rx' => 'getMailOrderRx',
        'nonpreferred_generic_drug_share' => 'getNonpreferredGenericDrugShare',
        'nonpreferred_specialty_drug_share' => 'getNonpreferredSpecialtyDrugShare',
        'outpatient_ambulatory_care_center' => 'getOutpatientAmbulatoryCareCenter',
        'plan_calendar' => 'getPlanCalendar',
        'prenatal_care' => 'getPrenatalCare',
        'postnatal_care' => 'getPostnatalCare',
        'skilled_nursing_facility_365' => 'getSkilledNursingFacility365',
        'essential_health_benefits_percentage' => 'getEssentialHealthBenefitsPercentage'
    );

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['carrier_name'] = isset($data['carrier_name']) ? $data['carrier_name'] : null;
        $this->container['display_name'] = isset($data['display_name']) ? $data['display_name'] : null;
        $this->container['effective_date'] = isset($data['effective_date']) ? $data['effective_date'] : null;
        $this->container['expiration_date'] = isset($data['expiration_date']) ? $data['expiration_date'] : null;
        $this->container['identifiers'] = isset($data['identifiers']) ? $data['identifiers'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['network_ids'] = isset($data['network_ids']) ? $data['network_ids'] : null;
        $this->container['network_size'] = isset($data['network_size']) ? $data['network_size'] : null;
        $this->container['plan_type'] = isset($data['plan_type']) ? $data['plan_type'] : null;
        $this->container['service_area_id'] = isset($data['service_area_id']) ? $data['service_area_id'] : null;
        $this->container['source'] = isset($data['source']) ? $data['source'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['adult_dental'] = isset($data['adult_dental']) ? $data['adult_dental'] : null;
        $this->container['age29_rider'] = isset($data['age29_rider']) ? $data['age29_rider'] : null;
        $this->container['ambulance'] = isset($data['ambulance']) ? $data['ambulance'] : null;
        $this->container['benefits_summary_url'] = isset($data['benefits_summary_url']) ? $data['benefits_summary_url'] : null;
        $this->container['buy_link'] = isset($data['buy_link']) ? $data['buy_link'] : null;
        $this->container['child_dental'] = isset($data['child_dental']) ? $data['child_dental'] : null;
        $this->container['child_eyewear'] = isset($data['child_eyewear']) ? $data['child_eyewear'] : null;
        $this->container['child_eye_exam'] = isset($data['child_eye_exam']) ? $data['child_eye_exam'] : null;
        $this->container['customer_service_phone_number'] = isset($data['customer_service_phone_number']) ? $data['customer_service_phone_number'] : null;
        $this->container['durable_medical_equipment'] = isset($data['durable_medical_equipment']) ? $data['durable_medical_equipment'] : null;
        $this->container['diagnostic_test'] = isset($data['diagnostic_test']) ? $data['diagnostic_test'] : null;
        $this->container['dp_rider'] = isset($data['dp_rider']) ? $data['dp_rider'] : null;
        $this->container['drug_formulary_url'] = isset($data['drug_formulary_url']) ? $data['drug_formulary_url'] : null;
        $this->container['emergency_room'] = isset($data['emergency_room']) ? $data['emergency_room'] : null;
        $this->container['family_drug_deductible'] = isset($data['family_drug_deductible']) ? $data['family_drug_deductible'] : null;
        $this->container['family_drug_moop'] = isset($data['family_drug_moop']) ? $data['family_drug_moop'] : null;
        $this->container['family_medical_deductible'] = isset($data['family_medical_deductible']) ? $data['family_medical_deductible'] : null;
        $this->container['family_medical_moop'] = isset($data['family_medical_moop']) ? $data['family_medical_moop'] : null;
        $this->container['fp_rider'] = isset($data['fp_rider']) ? $data['fp_rider'] : null;
        $this->container['generic_drugs'] = isset($data['generic_drugs']) ? $data['generic_drugs'] : null;
        $this->container['habilitation_services'] = isset($data['habilitation_services']) ? $data['habilitation_services'] : null;
        $this->container['hios_issuer_id'] = isset($data['hios_issuer_id']) ? $data['hios_issuer_id'] : null;
        $this->container['home_health_care'] = isset($data['home_health_care']) ? $data['home_health_care'] : null;
        $this->container['hospice_service'] = isset($data['hospice_service']) ? $data['hospice_service'] : null;
        $this->container['hsa_eligible'] = isset($data['hsa_eligible']) ? $data['hsa_eligible'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['imaging'] = isset($data['imaging']) ? $data['imaging'] : null;
        $this->container['individual_drug_deductible'] = isset($data['individual_drug_deductible']) ? $data['individual_drug_deductible'] : null;
        $this->container['individual_drug_moop'] = isset($data['individual_drug_moop']) ? $data['individual_drug_moop'] : null;
        $this->container['individual_medical_deductible'] = isset($data['individual_medical_deductible']) ? $data['individual_medical_deductible'] : null;
        $this->container['individual_medical_moop'] = isset($data['individual_medical_moop']) ? $data['individual_medical_moop'] : null;
        $this->container['inpatient_birth'] = isset($data['inpatient_birth']) ? $data['inpatient_birth'] : null;
        $this->container['inpatient_facility'] = isset($data['inpatient_facility']) ? $data['inpatient_facility'] : null;
        $this->container['inpatient_mental_health'] = isset($data['inpatient_mental_health']) ? $data['inpatient_mental_health'] : null;
        $this->container['inpatient_physician'] = isset($data['inpatient_physician']) ? $data['inpatient_physician'] : null;
        $this->container['inpatient_substance'] = isset($data['inpatient_substance']) ? $data['inpatient_substance'] : null;
        $this->container['in_network_ids'] = isset($data['in_network_ids']) ? $data['in_network_ids'] : null;
        $this->container['level'] = isset($data['level']) ? $data['level'] : null;
        $this->container['logo_url'] = isset($data['logo_url']) ? $data['logo_url'] : null;
        $this->container['non_preferred_brand_drugs'] = isset($data['non_preferred_brand_drugs']) ? $data['non_preferred_brand_drugs'] : null;
        $this->container['on_market'] = isset($data['on_market']) ? $data['on_market'] : null;
        $this->container['off_market'] = isset($data['off_market']) ? $data['off_market'] : null;
        $this->container['out_of_network_coverage'] = isset($data['out_of_network_coverage']) ? $data['out_of_network_coverage'] : null;
        $this->container['out_of_network_ids'] = isset($data['out_of_network_ids']) ? $data['out_of_network_ids'] : null;
        $this->container['outpatient_facility'] = isset($data['outpatient_facility']) ? $data['outpatient_facility'] : null;
        $this->container['outpatient_mental_health'] = isset($data['outpatient_mental_health']) ? $data['outpatient_mental_health'] : null;
        $this->container['outpatient_physician'] = isset($data['outpatient_physician']) ? $data['outpatient_physician'] : null;
        $this->container['outpatient_substance'] = isset($data['outpatient_substance']) ? $data['outpatient_substance'] : null;
        $this->container['plan_market'] = isset($data['plan_market']) ? $data['plan_market'] : null;
        $this->container['preferred_brand_drugs'] = isset($data['preferred_brand_drugs']) ? $data['preferred_brand_drugs'] : null;
        $this->container['prenatal_postnatal_care'] = isset($data['prenatal_postnatal_care']) ? $data['prenatal_postnatal_care'] : null;
        $this->container['preventative_care'] = isset($data['preventative_care']) ? $data['preventative_care'] : null;
        $this->container['premium_subsidized'] = isset($data['premium_subsidized']) ? $data['premium_subsidized'] : null;
        $this->container['premium'] = isset($data['premium']) ? $data['premium'] : null;
        $this->container['premium_source'] = isset($data['premium_source']) ? $data['premium_source'] : null;
        $this->container['primary_care_physician'] = isset($data['primary_care_physician']) ? $data['primary_care_physician'] : null;
        $this->container['rehabilitation_services'] = isset($data['rehabilitation_services']) ? $data['rehabilitation_services'] : null;
        $this->container['skilled_nursing'] = isset($data['skilled_nursing']) ? $data['skilled_nursing'] : null;
        $this->container['specialist'] = isset($data['specialist']) ? $data['specialist'] : null;
        $this->container['specialty_drugs'] = isset($data['specialty_drugs']) ? $data['specialty_drugs'] : null;
        $this->container['urgent_care'] = isset($data['urgent_care']) ? $data['urgent_care'] : null;
        $this->container['actuarial_value'] = isset($data['actuarial_value']) ? $data['actuarial_value'] : null;
        $this->container['chiropractic_services'] = isset($data['chiropractic_services']) ? $data['chiropractic_services'] : null;
        $this->container['coinsurance'] = isset($data['coinsurance']) ? $data['coinsurance'] : null;
        $this->container['embedded_deductible'] = isset($data['embedded_deductible']) ? $data['embedded_deductible'] : null;
        $this->container['gated'] = isset($data['gated']) ? $data['gated'] : null;
        $this->container['imaging_center'] = isset($data['imaging_center']) ? $data['imaging_center'] : null;
        $this->container['imaging_physician'] = isset($data['imaging_physician']) ? $data['imaging_physician'] : null;
        $this->container['lab_test'] = isset($data['lab_test']) ? $data['lab_test'] : null;
        $this->container['mail_order_rx'] = isset($data['mail_order_rx']) ? $data['mail_order_rx'] : null;
        $this->container['nonpreferred_generic_drug_share'] = isset($data['nonpreferred_generic_drug_share']) ? $data['nonpreferred_generic_drug_share'] : null;
        $this->container['nonpreferred_specialty_drug_share'] = isset($data['nonpreferred_specialty_drug_share']) ? $data['nonpreferred_specialty_drug_share'] : null;
        $this->container['outpatient_ambulatory_care_center'] = isset($data['outpatient_ambulatory_care_center']) ? $data['outpatient_ambulatory_care_center'] : null;
        $this->container['plan_calendar'] = isset($data['plan_calendar']) ? $data['plan_calendar'] : null;
        $this->container['prenatal_care'] = isset($data['prenatal_care']) ? $data['prenatal_care'] : null;
        $this->container['postnatal_care'] = isset($data['postnatal_care']) ? $data['postnatal_care'] : null;
        $this->container['skilled_nursing_facility_365'] = isset($data['skilled_nursing_facility_365']) ? $data['skilled_nursing_facility_365'] : null;
        $this->container['essential_health_benefits_percentage'] = isset($data['essential_health_benefits_percentage']) ? $data['essential_health_benefits_percentage'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        return true;
    }


    /**
     * Gets carrier_name
     * @return string
     */
    public function getCarrierName()
    {
        return $this->container['carrier_name'];
    }

    /**
     * Sets carrier_name
     * @param string $carrier_name Name of the insurance carrier
     * @return $this
     */
    public function setCarrierName($carrier_name)
    {
        $this->container['carrier_name'] = $carrier_name;

        return $this;
    }

    /**
     * Gets display_name
     * @return string
     */
    public function getDisplayName()
    {
        return $this->container['display_name'];
    }

    /**
     * Sets display_name
     * @param string $display_name Alternate name for the Plan
     * @return $this
     */
    public function setDisplayName($display_name)
    {
        $this->container['display_name'] = $display_name;

        return $this;
    }

    /**
     * Gets effective_date
     * @return string
     */
    public function getEffectiveDate()
    {
        return $this->container['effective_date'];
    }

    /**
     * Sets effective_date
     * @param string $effective_date Effective date of coverage.
     * @return $this
     */
    public function setEffectiveDate($effective_date)
    {
        $this->container['effective_date'] = $effective_date;

        return $this;
    }

    /**
     * Gets expiration_date
     * @return string
     */
    public function getExpirationDate()
    {
        return $this->container['expiration_date'];
    }

    /**
     * Sets expiration_date
     * @param string $expiration_date Expiration date of coverage.
     * @return $this
     */
    public function setExpirationDate($expiration_date)
    {
        $this->container['expiration_date'] = $expiration_date;

        return $this;
    }

    /**
     * Gets identifiers
     * @return \Swagger\Client\Model\PlanIdentifier[]
     */
    public function getIdentifiers()
    {
        return $this->container['identifiers'];
    }

    /**
     * Sets identifiers
     * @param \Swagger\Client\Model\PlanIdentifier[] $identifiers List of identifiers of this Plan
     * @return $this
     */
    public function setIdentifiers($identifiers)
    {
        $this->container['identifiers'] = $identifiers;

        return $this;
    }

    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     * @param string $name Marketing name of the plan
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets network_ids
     * @return int[]
     */
    public function getNetworkIds()
    {
        return $this->container['network_ids'];
    }

    /**
     * Sets network_ids
     * @param int[] $network_ids List of Vericred-generated network_ids
     * @return $this
     */
    public function setNetworkIds($network_ids)
    {
        $this->container['network_ids'] = $network_ids;

        return $this;
    }

    /**
     * Gets network_size
     * @return int
     */
    public function getNetworkSize()
    {
        return $this->container['network_size'];
    }

    /**
     * Sets network_size
     * @param int $network_size Total number of Providers in network
     * @return $this
     */
    public function setNetworkSize($network_size)
    {
        $this->container['network_size'] = $network_size;

        return $this;
    }

    /**
     * Gets plan_type
     * @return string
     */
    public function getPlanType()
    {
        return $this->container['plan_type'];
    }

    /**
     * Sets plan_type
     * @param string $plan_type Category of the plan (e.g. EPO, HMO, PPO, POS, Indemnity, PACE, Medicare-Medicaid, HMO w/POS, Cost, FFS, MSA)
     * @return $this
     */
    public function setPlanType($plan_type)
    {
        $this->container['plan_type'] = $plan_type;

        return $this;
    }

    /**
     * Gets service_area_id
     * @return string
     */
    public function getServiceAreaId()
    {
        return $this->container['service_area_id'];
    }

    /**
     * Sets service_area_id
     * @param string $service_area_id Foreign key for service area
     * @return $this
     */
    public function setServiceAreaId($service_area_id)
    {
        $this->container['service_area_id'] = $service_area_id;

        return $this;
    }

    /**
     * Gets source
     * @return string
     */
    public function getSource()
    {
        return $this->container['source'];
    }

    /**
     * Sets source
     * @param string $source Source of the plan benefit data
     * @return $this
     */
    public function setSource($source)
    {
        $this->container['source'] = $source;

        return $this;
    }

    /**
     * Gets type
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     * @param string $type The type of the Plan
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets adult_dental
     * @return bool
     */
    public function getAdultDental()
    {
        return $this->container['adult_dental'];
    }

    /**
     * Sets adult_dental
     * @param bool $adult_dental Does the plan provide dental coverage for adults?
     * @return $this
     */
    public function setAdultDental($adult_dental)
    {
        $this->container['adult_dental'] = $adult_dental;

        return $this;
    }

    /**
     * Gets age29_rider
     * @return bool
     */
    public function getAge29Rider()
    {
        return $this->container['age29_rider'];
    }

    /**
     * Sets age29_rider
     * @param bool $age29_rider True if the plan allows dependents up to age 29
     * @return $this
     */
    public function setAge29Rider($age29_rider)
    {
        $this->container['age29_rider'] = $age29_rider;

        return $this;
    }

    /**
     * Gets ambulance
     * @return string
     */
    public function getAmbulance()
    {
        return $this->container['ambulance'];
    }

    /**
     * Sets ambulance
     * @param string $ambulance Benefits string for ambulance coverage
     * @return $this
     */
    public function setAmbulance($ambulance)
    {
        $this->container['ambulance'] = $ambulance;

        return $this;
    }

    /**
     * Gets benefits_summary_url
     * @return string
     */
    public function getBenefitsSummaryUrl()
    {
        return $this->container['benefits_summary_url'];
    }

    /**
     * Sets benefits_summary_url
     * @param string $benefits_summary_url Link to the summary of benefits and coverage (SBC) document.
     * @return $this
     */
    public function setBenefitsSummaryUrl($benefits_summary_url)
    {
        $this->container['benefits_summary_url'] = $benefits_summary_url;

        return $this;
    }

    /**
     * Gets buy_link
     * @return string
     */
    public function getBuyLink()
    {
        return $this->container['buy_link'];
    }

    /**
     * Sets buy_link
     * @param string $buy_link Link to a location to purchase the plan.
     * @return $this
     */
    public function setBuyLink($buy_link)
    {
        $this->container['buy_link'] = $buy_link;

        return $this;
    }

    /**
     * Gets child_dental
     * @return bool
     */
    public function getChildDental()
    {
        return $this->container['child_dental'];
    }

    /**
     * Sets child_dental
     * @param bool $child_dental Does the plan provide dental coverage for children?
     * @return $this
     */
    public function setChildDental($child_dental)
    {
        $this->container['child_dental'] = $child_dental;

        return $this;
    }

    /**
     * Gets child_eyewear
     * @return string
     */
    public function getChildEyewear()
    {
        return $this->container['child_eyewear'];
    }

    /**
     * Sets child_eyewear
     * @param string $child_eyewear Child eyewear benefits summary
     * @return $this
     */
    public function setChildEyewear($child_eyewear)
    {
        $this->container['child_eyewear'] = $child_eyewear;

        return $this;
    }

    /**
     * Gets child_eye_exam
     * @return string
     */
    public function getChildEyeExam()
    {
        return $this->container['child_eye_exam'];
    }

    /**
     * Sets child_eye_exam
     * @param string $child_eye_exam Child eye exam benefits summary
     * @return $this
     */
    public function setChildEyeExam($child_eye_exam)
    {
        $this->container['child_eye_exam'] = $child_eye_exam;

        return $this;
    }

    /**
     * Gets customer_service_phone_number
     * @return string
     */
    public function getCustomerServicePhoneNumber()
    {
        return $this->container['customer_service_phone_number'];
    }

    /**
     * Sets customer_service_phone_number
     * @param string $customer_service_phone_number Phone number to contact the insurance carrier
     * @return $this
     */
    public function setCustomerServicePhoneNumber($customer_service_phone_number)
    {
        $this->container['customer_service_phone_number'] = $customer_service_phone_number;

        return $this;
    }

    /**
     * Gets durable_medical_equipment
     * @return string
     */
    public function getDurableMedicalEquipment()
    {
        return $this->container['durable_medical_equipment'];
    }

    /**
     * Sets durable_medical_equipment
     * @param string $durable_medical_equipment Benefits summary for durable medical equipment
     * @return $this
     */
    public function setDurableMedicalEquipment($durable_medical_equipment)
    {
        $this->container['durable_medical_equipment'] = $durable_medical_equipment;

        return $this;
    }

    /**
     * Gets diagnostic_test
     * @return string
     */
    public function getDiagnosticTest()
    {
        return $this->container['diagnostic_test'];
    }

    /**
     * Sets diagnostic_test
     * @param string $diagnostic_test Diagnostic tests benefit summary
     * @return $this
     */
    public function setDiagnosticTest($diagnostic_test)
    {
        $this->container['diagnostic_test'] = $diagnostic_test;

        return $this;
    }

    /**
     * Gets dp_rider
     * @return bool
     */
    public function getDpRider()
    {
        return $this->container['dp_rider'];
    }

    /**
     * Sets dp_rider
     * @param bool $dp_rider True if plan does not cover domestic partners
     * @return $this
     */
    public function setDpRider($dp_rider)
    {
        $this->container['dp_rider'] = $dp_rider;

        return $this;
    }

    /**
     * Gets drug_formulary_url
     * @return string
     */
    public function getDrugFormularyUrl()
    {
        return $this->container['drug_formulary_url'];
    }

    /**
     * Sets drug_formulary_url
     * @param string $drug_formulary_url Link to the summary of drug benefits for the plan
     * @return $this
     */
    public function setDrugFormularyUrl($drug_formulary_url)
    {
        $this->container['drug_formulary_url'] = $drug_formulary_url;

        return $this;
    }

    /**
     * Gets emergency_room
     * @return string
     */
    public function getEmergencyRoom()
    {
        return $this->container['emergency_room'];
    }

    /**
     * Sets emergency_room
     * @param string $emergency_room Description of costs when visiting the ER
     * @return $this
     */
    public function setEmergencyRoom($emergency_room)
    {
        $this->container['emergency_room'] = $emergency_room;

        return $this;
    }

    /**
     * Gets family_drug_deductible
     * @return string
     */
    public function getFamilyDrugDeductible()
    {
        return $this->container['family_drug_deductible'];
    }

    /**
     * Sets family_drug_deductible
     * @param string $family_drug_deductible Deductible for drugs when a family is on the plan.
     * @return $this
     */
    public function setFamilyDrugDeductible($family_drug_deductible)
    {
        $this->container['family_drug_deductible'] = $family_drug_deductible;

        return $this;
    }

    /**
     * Gets family_drug_moop
     * @return string
     */
    public function getFamilyDrugMoop()
    {
        return $this->container['family_drug_moop'];
    }

    /**
     * Sets family_drug_moop
     * @param string $family_drug_moop Maximum out-of-pocket for drugs when a family is on the plan
     * @return $this
     */
    public function setFamilyDrugMoop($family_drug_moop)
    {
        $this->container['family_drug_moop'] = $family_drug_moop;

        return $this;
    }

    /**
     * Gets family_medical_deductible
     * @return string
     */
    public function getFamilyMedicalDeductible()
    {
        return $this->container['family_medical_deductible'];
    }

    /**
     * Sets family_medical_deductible
     * @param string $family_medical_deductible Deductible when a family is on the plan
     * @return $this
     */
    public function setFamilyMedicalDeductible($family_medical_deductible)
    {
        $this->container['family_medical_deductible'] = $family_medical_deductible;

        return $this;
    }

    /**
     * Gets family_medical_moop
     * @return string
     */
    public function getFamilyMedicalMoop()
    {
        return $this->container['family_medical_moop'];
    }

    /**
     * Sets family_medical_moop
     * @param string $family_medical_moop Maximum out-of-pocket when a family is on the plan
     * @return $this
     */
    public function setFamilyMedicalMoop($family_medical_moop)
    {
        $this->container['family_medical_moop'] = $family_medical_moop;

        return $this;
    }

    /**
     * Gets fp_rider
     * @return bool
     */
    public function getFpRider()
    {
        return $this->container['fp_rider'];
    }

    /**
     * Sets fp_rider
     * @param bool $fp_rider True if plan does not cover family planning
     * @return $this
     */
    public function setFpRider($fp_rider)
    {
        $this->container['fp_rider'] = $fp_rider;

        return $this;
    }

    /**
     * Gets generic_drugs
     * @return string
     */
    public function getGenericDrugs()
    {
        return $this->container['generic_drugs'];
    }

    /**
     * Sets generic_drugs
     * @param string $generic_drugs Cost for generic drugs
     * @return $this
     */
    public function setGenericDrugs($generic_drugs)
    {
        $this->container['generic_drugs'] = $generic_drugs;

        return $this;
    }

    /**
     * Gets habilitation_services
     * @return string
     */
    public function getHabilitationServices()
    {
        return $this->container['habilitation_services'];
    }

    /**
     * Sets habilitation_services
     * @param string $habilitation_services Habilitation services benefits summary
     * @return $this
     */
    public function setHabilitationServices($habilitation_services)
    {
        $this->container['habilitation_services'] = $habilitation_services;

        return $this;
    }

    /**
     * Gets hios_issuer_id
     * @return string
     */
    public function getHiosIssuerId()
    {
        return $this->container['hios_issuer_id'];
    }

    /**
     * Sets hios_issuer_id
     * @param string $hios_issuer_id 
     * @return $this
     */
    public function setHiosIssuerId($hios_issuer_id)
    {
        $this->container['hios_issuer_id'] = $hios_issuer_id;

        return $this;
    }

    /**
     * Gets home_health_care
     * @return string
     */
    public function getHomeHealthCare()
    {
        return $this->container['home_health_care'];
    }

    /**
     * Sets home_health_care
     * @param string $home_health_care Home health care benefits summary
     * @return $this
     */
    public function setHomeHealthCare($home_health_care)
    {
        $this->container['home_health_care'] = $home_health_care;

        return $this;
    }

    /**
     * Gets hospice_service
     * @return string
     */
    public function getHospiceService()
    {
        return $this->container['hospice_service'];
    }

    /**
     * Sets hospice_service
     * @param string $hospice_service Hospice service benefits summary
     * @return $this
     */
    public function setHospiceService($hospice_service)
    {
        $this->container['hospice_service'] = $hospice_service;

        return $this;
    }

    /**
     * Gets hsa_eligible
     * @return bool
     */
    public function getHsaEligible()
    {
        return $this->container['hsa_eligible'];
    }

    /**
     * Sets hsa_eligible
     * @param bool $hsa_eligible Is the plan HSA eligible?
     * @return $this
     */
    public function setHsaEligible($hsa_eligible)
    {
        $this->container['hsa_eligible'] = $hsa_eligible;

        return $this;
    }

    /**
     * Gets id
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param string $id Government-issued HIOS plan ID
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets imaging
     * @return string
     */
    public function getImaging()
    {
        return $this->container['imaging'];
    }

    /**
     * Sets imaging
     * @param string $imaging Benefits summary for imaging coverage
     * @return $this
     */
    public function setImaging($imaging)
    {
        $this->container['imaging'] = $imaging;

        return $this;
    }

    /**
     * Gets individual_drug_deductible
     * @return string
     */
    public function getIndividualDrugDeductible()
    {
        return $this->container['individual_drug_deductible'];
    }

    /**
     * Sets individual_drug_deductible
     * @param string $individual_drug_deductible Deductible for drugs when an individual is on the plan
     * @return $this
     */
    public function setIndividualDrugDeductible($individual_drug_deductible)
    {
        $this->container['individual_drug_deductible'] = $individual_drug_deductible;

        return $this;
    }

    /**
     * Gets individual_drug_moop
     * @return string
     */
    public function getIndividualDrugMoop()
    {
        return $this->container['individual_drug_moop'];
    }

    /**
     * Sets individual_drug_moop
     * @param string $individual_drug_moop Maximum out-of-pocket for drugs when an individual is on the plan
     * @return $this
     */
    public function setIndividualDrugMoop($individual_drug_moop)
    {
        $this->container['individual_drug_moop'] = $individual_drug_moop;

        return $this;
    }

    /**
     * Gets individual_medical_deductible
     * @return string
     */
    public function getIndividualMedicalDeductible()
    {
        return $this->container['individual_medical_deductible'];
    }

    /**
     * Sets individual_medical_deductible
     * @param string $individual_medical_deductible Deductible when an individual is on the plan
     * @return $this
     */
    public function setIndividualMedicalDeductible($individual_medical_deductible)
    {
        $this->container['individual_medical_deductible'] = $individual_medical_deductible;

        return $this;
    }

    /**
     * Gets individual_medical_moop
     * @return string
     */
    public function getIndividualMedicalMoop()
    {
        return $this->container['individual_medical_moop'];
    }

    /**
     * Sets individual_medical_moop
     * @param string $individual_medical_moop Maximum out-of-pocket when an individual is on the plan
     * @return $this
     */
    public function setIndividualMedicalMoop($individual_medical_moop)
    {
        $this->container['individual_medical_moop'] = $individual_medical_moop;

        return $this;
    }

    /**
     * Gets inpatient_birth
     * @return string
     */
    public function getInpatientBirth()
    {
        return $this->container['inpatient_birth'];
    }

    /**
     * Sets inpatient_birth
     * @param string $inpatient_birth Inpatient birth benefits summary
     * @return $this
     */
    public function setInpatientBirth($inpatient_birth)
    {
        $this->container['inpatient_birth'] = $inpatient_birth;

        return $this;
    }

    /**
     * Gets inpatient_facility
     * @return string
     */
    public function getInpatientFacility()
    {
        return $this->container['inpatient_facility'];
    }

    /**
     * Sets inpatient_facility
     * @param string $inpatient_facility Cost under the plan for an inpatient facility
     * @return $this
     */
    public function setInpatientFacility($inpatient_facility)
    {
        $this->container['inpatient_facility'] = $inpatient_facility;

        return $this;
    }

    /**
     * Gets inpatient_mental_health
     * @return string
     */
    public function getInpatientMentalHealth()
    {
        return $this->container['inpatient_mental_health'];
    }

    /**
     * Sets inpatient_mental_health
     * @param string $inpatient_mental_health Inpatient mental helath benefits summary
     * @return $this
     */
    public function setInpatientMentalHealth($inpatient_mental_health)
    {
        $this->container['inpatient_mental_health'] = $inpatient_mental_health;

        return $this;
    }

    /**
     * Gets inpatient_physician
     * @return string
     */
    public function getInpatientPhysician()
    {
        return $this->container['inpatient_physician'];
    }

    /**
     * Sets inpatient_physician
     * @param string $inpatient_physician Cost under the plan for an inpatient physician
     * @return $this
     */
    public function setInpatientPhysician($inpatient_physician)
    {
        $this->container['inpatient_physician'] = $inpatient_physician;

        return $this;
    }

    /**
     * Gets inpatient_substance
     * @return string
     */
    public function getInpatientSubstance()
    {
        return $this->container['inpatient_substance'];
    }

    /**
     * Sets inpatient_substance
     * @param string $inpatient_substance Inpatient substance abuse benefits summary
     * @return $this
     */
    public function setInpatientSubstance($inpatient_substance)
    {
        $this->container['inpatient_substance'] = $inpatient_substance;

        return $this;
    }

    /**
     * Gets in_network_ids
     * @return int[]
     */
    public function getInNetworkIds()
    {
        return $this->container['in_network_ids'];
    }

    /**
     * Sets in_network_ids
     * @param int[] $in_network_ids List of NPI numbers for Providers passed in who accept this Plan
     * @return $this
     */
    public function setInNetworkIds($in_network_ids)
    {
        $this->container['in_network_ids'] = $in_network_ids;

        return $this;
    }

    /**
     * Gets level
     * @return string
     */
    public function getLevel()
    {
        return $this->container['level'];
    }

    /**
     * Sets level
     * @param string $level Plan metal grouping (e.g. platinum, gold, silver, etc)
     * @return $this
     */
    public function setLevel($level)
    {
        $this->container['level'] = $level;

        return $this;
    }

    /**
     * Gets logo_url
     * @return string
     */
    public function getLogoUrl()
    {
        return $this->container['logo_url'];
    }

    /**
     * Sets logo_url
     * @param string $logo_url Link to a copy of the insurance carrier's logo
     * @return $this
     */
    public function setLogoUrl($logo_url)
    {
        $this->container['logo_url'] = $logo_url;

        return $this;
    }

    /**
     * Gets non_preferred_brand_drugs
     * @return string
     */
    public function getNonPreferredBrandDrugs()
    {
        return $this->container['non_preferred_brand_drugs'];
    }

    /**
     * Sets non_preferred_brand_drugs
     * @param string $non_preferred_brand_drugs Cost under the plan for non-preferred brand drugs
     * @return $this
     */
    public function setNonPreferredBrandDrugs($non_preferred_brand_drugs)
    {
        $this->container['non_preferred_brand_drugs'] = $non_preferred_brand_drugs;

        return $this;
    }

    /**
     * Gets on_market
     * @return bool
     */
    public function getOnMarket()
    {
        return $this->container['on_market'];
    }

    /**
     * Sets on_market
     * @param bool $on_market Is the plan on-market?
     * @return $this
     */
    public function setOnMarket($on_market)
    {
        $this->container['on_market'] = $on_market;

        return $this;
    }

    /**
     * Gets off_market
     * @return bool
     */
    public function getOffMarket()
    {
        return $this->container['off_market'];
    }

    /**
     * Sets off_market
     * @param bool $off_market Is the plan off-market?
     * @return $this
     */
    public function setOffMarket($off_market)
    {
        $this->container['off_market'] = $off_market;

        return $this;
    }

    /**
     * Gets out_of_network_coverage
     * @return bool
     */
    public function getOutOfNetworkCoverage()
    {
        return $this->container['out_of_network_coverage'];
    }

    /**
     * Sets out_of_network_coverage
     * @param bool $out_of_network_coverage Does this plan provide any out of network coverage?
     * @return $this
     */
    public function setOutOfNetworkCoverage($out_of_network_coverage)
    {
        $this->container['out_of_network_coverage'] = $out_of_network_coverage;

        return $this;
    }

    /**
     * Gets out_of_network_ids
     * @return int[]
     */
    public function getOutOfNetworkIds()
    {
        return $this->container['out_of_network_ids'];
    }

    /**
     * Sets out_of_network_ids
     * @param int[] $out_of_network_ids List of NPI numbers for Providers passed in who do not accept this Plan
     * @return $this
     */
    public function setOutOfNetworkIds($out_of_network_ids)
    {
        $this->container['out_of_network_ids'] = $out_of_network_ids;

        return $this;
    }

    /**
     * Gets outpatient_facility
     * @return string
     */
    public function getOutpatientFacility()
    {
        return $this->container['outpatient_facility'];
    }

    /**
     * Sets outpatient_facility
     * @param string $outpatient_facility Benefits summary for outpatient facility coverage
     * @return $this
     */
    public function setOutpatientFacility($outpatient_facility)
    {
        $this->container['outpatient_facility'] = $outpatient_facility;

        return $this;
    }

    /**
     * Gets outpatient_mental_health
     * @return string
     */
    public function getOutpatientMentalHealth()
    {
        return $this->container['outpatient_mental_health'];
    }

    /**
     * Sets outpatient_mental_health
     * @param string $outpatient_mental_health Benefits summary for outpatient mental health coverage
     * @return $this
     */
    public function setOutpatientMentalHealth($outpatient_mental_health)
    {
        $this->container['outpatient_mental_health'] = $outpatient_mental_health;

        return $this;
    }

    /**
     * Gets outpatient_physician
     * @return string
     */
    public function getOutpatientPhysician()
    {
        return $this->container['outpatient_physician'];
    }

    /**
     * Sets outpatient_physician
     * @param string $outpatient_physician Benefits summary for outpatient physician coverage
     * @return $this
     */
    public function setOutpatientPhysician($outpatient_physician)
    {
        $this->container['outpatient_physician'] = $outpatient_physician;

        return $this;
    }

    /**
     * Gets outpatient_substance
     * @return string
     */
    public function getOutpatientSubstance()
    {
        return $this->container['outpatient_substance'];
    }

    /**
     * Sets outpatient_substance
     * @param string $outpatient_substance Outpatient substance abuse benefits summary
     * @return $this
     */
    public function setOutpatientSubstance($outpatient_substance)
    {
        $this->container['outpatient_substance'] = $outpatient_substance;

        return $this;
    }

    /**
     * Gets plan_market
     * @return string
     */
    public function getPlanMarket()
    {
        return $this->container['plan_market'];
    }

    /**
     * Sets plan_market
     * @param string $plan_market Market in which the plan is offered (on_marketplace, shop, etc)
     * @return $this
     */
    public function setPlanMarket($plan_market)
    {
        $this->container['plan_market'] = $plan_market;

        return $this;
    }

    /**
     * Gets preferred_brand_drugs
     * @return string
     */
    public function getPreferredBrandDrugs()
    {
        return $this->container['preferred_brand_drugs'];
    }

    /**
     * Sets preferred_brand_drugs
     * @param string $preferred_brand_drugs Cost under the plan for perferred brand drugs
     * @return $this
     */
    public function setPreferredBrandDrugs($preferred_brand_drugs)
    {
        $this->container['preferred_brand_drugs'] = $preferred_brand_drugs;

        return $this;
    }

    /**
     * Gets prenatal_postnatal_care
     * @return string
     */
    public function getPrenatalPostnatalCare()
    {
        return $this->container['prenatal_postnatal_care'];
    }

    /**
     * Sets prenatal_postnatal_care
     * @param string $prenatal_postnatal_care Inpatient substance abuse benefits summary
     * @return $this
     */
    public function setPrenatalPostnatalCare($prenatal_postnatal_care)
    {
        $this->container['prenatal_postnatal_care'] = $prenatal_postnatal_care;

        return $this;
    }

    /**
     * Gets preventative_care
     * @return string
     */
    public function getPreventativeCare()
    {
        return $this->container['preventative_care'];
    }

    /**
     * Sets preventative_care
     * @param string $preventative_care Benefits summary for preventative care
     * @return $this
     */
    public function setPreventativeCare($preventative_care)
    {
        $this->container['preventative_care'] = $preventative_care;

        return $this;
    }

    /**
     * Gets premium_subsidized
     * @return float
     */
    public function getPremiumSubsidized()
    {
        return $this->container['premium_subsidized'];
    }

    /**
     * Sets premium_subsidized
     * @param float $premium_subsidized Cumulative premium amount after subsidy
     * @return $this
     */
    public function setPremiumSubsidized($premium_subsidized)
    {
        $this->container['premium_subsidized'] = $premium_subsidized;

        return $this;
    }

    /**
     * Gets premium
     * @return float
     */
    public function getPremium()
    {
        return $this->container['premium'];
    }

    /**
     * Sets premium
     * @param float $premium Cumulative premium amount
     * @return $this
     */
    public function setPremium($premium)
    {
        $this->container['premium'] = $premium;

        return $this;
    }

    /**
     * Gets premium_source
     * @return string
     */
    public function getPremiumSource()
    {
        return $this->container['premium_source'];
    }

    /**
     * Sets premium_source
     * @param string $premium_source Source of the base pricing data
     * @return $this
     */
    public function setPremiumSource($premium_source)
    {
        $this->container['premium_source'] = $premium_source;

        return $this;
    }

    /**
     * Gets primary_care_physician
     * @return string
     */
    public function getPrimaryCarePhysician()
    {
        return $this->container['primary_care_physician'];
    }

    /**
     * Sets primary_care_physician
     * @param string $primary_care_physician Cost under the plan to visit a Primary Care Physician
     * @return $this
     */
    public function setPrimaryCarePhysician($primary_care_physician)
    {
        $this->container['primary_care_physician'] = $primary_care_physician;

        return $this;
    }

    /**
     * Gets rehabilitation_services
     * @return string
     */
    public function getRehabilitationServices()
    {
        return $this->container['rehabilitation_services'];
    }

    /**
     * Sets rehabilitation_services
     * @param string $rehabilitation_services Benefits summary for rehabilitation services
     * @return $this
     */
    public function setRehabilitationServices($rehabilitation_services)
    {
        $this->container['rehabilitation_services'] = $rehabilitation_services;

        return $this;
    }

    /**
     * Gets skilled_nursing
     * @return string
     */
    public function getSkilledNursing()
    {
        return $this->container['skilled_nursing'];
    }

    /**
     * Sets skilled_nursing
     * @param string $skilled_nursing Benefits summary for skilled nursing services
     * @return $this
     */
    public function setSkilledNursing($skilled_nursing)
    {
        $this->container['skilled_nursing'] = $skilled_nursing;

        return $this;
    }

    /**
     * Gets specialist
     * @return string
     */
    public function getSpecialist()
    {
        return $this->container['specialist'];
    }

    /**
     * Sets specialist
     * @param string $specialist Cost under the plan to visit a specialist
     * @return $this
     */
    public function setSpecialist($specialist)
    {
        $this->container['specialist'] = $specialist;

        return $this;
    }

    /**
     * Gets specialty_drugs
     * @return string
     */
    public function getSpecialtyDrugs()
    {
        return $this->container['specialty_drugs'];
    }

    /**
     * Sets specialty_drugs
     * @param string $specialty_drugs Cost under the plan for specialty drugs
     * @return $this
     */
    public function setSpecialtyDrugs($specialty_drugs)
    {
        $this->container['specialty_drugs'] = $specialty_drugs;

        return $this;
    }

    /**
     * Gets urgent_care
     * @return string
     */
    public function getUrgentCare()
    {
        return $this->container['urgent_care'];
    }

    /**
     * Sets urgent_care
     * @param string $urgent_care Benefits summary for urgent care
     * @return $this
     */
    public function setUrgentCare($urgent_care)
    {
        $this->container['urgent_care'] = $urgent_care;

        return $this;
    }

    /**
     * Gets actuarial_value
     * @return float
     */
    public function getActuarialValue()
    {
        return $this->container['actuarial_value'];
    }

    /**
     * Sets actuarial_value
     * @param float $actuarial_value Percentage of total average costs for covered benefits that a plan will cover.
     * @return $this
     */
    public function setActuarialValue($actuarial_value)
    {
        $this->container['actuarial_value'] = $actuarial_value;

        return $this;
    }

    /**
     * Gets chiropractic_services
     * @return string
     */
    public function getChiropracticServices()
    {
        return $this->container['chiropractic_services'];
    }

    /**
     * Sets chiropractic_services
     * @param string $chiropractic_services Chiropractic services benefits summary
     * @return $this
     */
    public function setChiropracticServices($chiropractic_services)
    {
        $this->container['chiropractic_services'] = $chiropractic_services;

        return $this;
    }

    /**
     * Gets coinsurance
     * @return float
     */
    public function getCoinsurance()
    {
        return $this->container['coinsurance'];
    }

    /**
     * Sets coinsurance
     * @param float $coinsurance Standard cost share for most benefits
     * @return $this
     */
    public function setCoinsurance($coinsurance)
    {
        $this->container['coinsurance'] = $coinsurance;

        return $this;
    }

    /**
     * Gets embedded_deductible
     * @return string
     */
    public function getEmbeddedDeductible()
    {
        return $this->container['embedded_deductible'];
    }

    /**
     * Sets embedded_deductible
     * @param string $embedded_deductible Is the individual deductible for each covered person, embedded in the family deductible
     * @return $this
     */
    public function setEmbeddedDeductible($embedded_deductible)
    {
        $this->container['embedded_deductible'] = $embedded_deductible;

        return $this;
    }

    /**
     * Gets gated
     * @return bool
     */
    public function getGated()
    {
        return $this->container['gated'];
    }

    /**
     * Sets gated
     * @param bool $gated Does the plan's network require a physician referral?
     * @return $this
     */
    public function setGated($gated)
    {
        $this->container['gated'] = $gated;

        return $this;
    }

    /**
     * Gets imaging_center
     * @return string
     */
    public function getImagingCenter()
    {
        return $this->container['imaging_center'];
    }

    /**
     * Sets imaging_center
     * @param string $imaging_center Imaging center benefits summary
     * @return $this
     */
    public function setImagingCenter($imaging_center)
    {
        $this->container['imaging_center'] = $imaging_center;

        return $this;
    }

    /**
     * Gets imaging_physician
     * @return string
     */
    public function getImagingPhysician()
    {
        return $this->container['imaging_physician'];
    }

    /**
     * Sets imaging_physician
     * @param string $imaging_physician Imaging physician benefits summary
     * @return $this
     */
    public function setImagingPhysician($imaging_physician)
    {
        $this->container['imaging_physician'] = $imaging_physician;

        return $this;
    }

    /**
     * Gets lab_test
     * @return string
     */
    public function getLabTest()
    {
        return $this->container['lab_test'];
    }

    /**
     * Sets lab_test
     * @param string $lab_test Lab test benefits summary
     * @return $this
     */
    public function setLabTest($lab_test)
    {
        $this->container['lab_test'] = $lab_test;

        return $this;
    }

    /**
     * Gets mail_order_rx
     * @return float
     */
    public function getMailOrderRx()
    {
        return $this->container['mail_order_rx'];
    }

    /**
     * Sets mail_order_rx
     * @param float $mail_order_rx Multiple of the standard Rx cost share for orders filled via mail order
     * @return $this
     */
    public function setMailOrderRx($mail_order_rx)
    {
        $this->container['mail_order_rx'] = $mail_order_rx;

        return $this;
    }

    /**
     * Gets nonpreferred_generic_drug_share
     * @return string
     */
    public function getNonpreferredGenericDrugShare()
    {
        return $this->container['nonpreferred_generic_drug_share'];
    }

    /**
     * Sets nonpreferred_generic_drug_share
     * @param string $nonpreferred_generic_drug_share Non-preferred generic drugs benefits summary
     * @return $this
     */
    public function setNonpreferredGenericDrugShare($nonpreferred_generic_drug_share)
    {
        $this->container['nonpreferred_generic_drug_share'] = $nonpreferred_generic_drug_share;

        return $this;
    }

    /**
     * Gets nonpreferred_specialty_drug_share
     * @return string
     */
    public function getNonpreferredSpecialtyDrugShare()
    {
        return $this->container['nonpreferred_specialty_drug_share'];
    }

    /**
     * Sets nonpreferred_specialty_drug_share
     * @param string $nonpreferred_specialty_drug_share Non-preferred specialty drugs benefits summary
     * @return $this
     */
    public function setNonpreferredSpecialtyDrugShare($nonpreferred_specialty_drug_share)
    {
        $this->container['nonpreferred_specialty_drug_share'] = $nonpreferred_specialty_drug_share;

        return $this;
    }

    /**
     * Gets outpatient_ambulatory_care_center
     * @return string
     */
    public function getOutpatientAmbulatoryCareCenter()
    {
        return $this->container['outpatient_ambulatory_care_center'];
    }

    /**
     * Sets outpatient_ambulatory_care_center
     * @param string $outpatient_ambulatory_care_center Outpatient ambulatory care center benefits summary
     * @return $this
     */
    public function setOutpatientAmbulatoryCareCenter($outpatient_ambulatory_care_center)
    {
        $this->container['outpatient_ambulatory_care_center'] = $outpatient_ambulatory_care_center;

        return $this;
    }

    /**
     * Gets plan_calendar
     * @return string
     */
    public function getPlanCalendar()
    {
        return $this->container['plan_calendar'];
    }

    /**
     * Sets plan_calendar
     * @param string $plan_calendar Are deductibles and MOOPs reset on Dec-31 (\"calendar year\"), 365 days after enrollment date (\"plan year\"), or are both options available (\"both\")?
     * @return $this
     */
    public function setPlanCalendar($plan_calendar)
    {
        $this->container['plan_calendar'] = $plan_calendar;

        return $this;
    }

    /**
     * Gets prenatal_care
     * @return string
     */
    public function getPrenatalCare()
    {
        return $this->container['prenatal_care'];
    }

    /**
     * Sets prenatal_care
     * @param string $prenatal_care Prenatal care benefits summary
     * @return $this
     */
    public function setPrenatalCare($prenatal_care)
    {
        $this->container['prenatal_care'] = $prenatal_care;

        return $this;
    }

    /**
     * Gets postnatal_care
     * @return string
     */
    public function getPostnatalCare()
    {
        return $this->container['postnatal_care'];
    }

    /**
     * Sets postnatal_care
     * @param string $postnatal_care Post-natal care benefits summary
     * @return $this
     */
    public function setPostnatalCare($postnatal_care)
    {
        $this->container['postnatal_care'] = $postnatal_care;

        return $this;
    }

    /**
     * Gets skilled_nursing_facility_365
     * @return string
     */
    public function getSkilledNursingFacility365()
    {
        return $this->container['skilled_nursing_facility_365'];
    }

    /**
     * Sets skilled_nursing_facility_365
     * @param string $skilled_nursing_facility_365 Does the plan cover full-time, year-round, nursing facilities?
     * @return $this
     */
    public function setSkilledNursingFacility365($skilled_nursing_facility_365)
    {
        $this->container['skilled_nursing_facility_365'] = $skilled_nursing_facility_365;

        return $this;
    }

    /**
     * Gets essential_health_benefits_percentage
     * @return float
     */
    public function getEssentialHealthBenefitsPercentage()
    {
        return $this->container['essential_health_benefits_percentage'];
    }

    /**
     * Sets essential_health_benefits_percentage
     * @param float $essential_health_benefits_percentage Percentage of essential plan benefits
     * @return $this
     */
    public function setEssentialHealthBenefitsPercentage($essential_health_benefits_percentage)
    {
        $this->container['essential_health_benefits_percentage'] = $essential_health_benefits_percentage;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Vericred\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Vericred\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


