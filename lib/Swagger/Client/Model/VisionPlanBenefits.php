<?php
/**
 * VisionPlanBenefits
 *
 * PHP version 5
 *
 * @category Class
 * @package  Vericred\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/*
 * Vericred API
 *
 */

/*
 Vericred's API allows you to search for Health Plans that a specific doctor
accepts.

## Getting Started

Visit our [Developer Portal](https://developers.vericred.com) to
create an account.

Once you have created an account, you can create one Application for
Production and another for our Sandbox (select the appropriate Plan when
you create the Application).

## SDKs

Our API follows standard REST conventions, so you can use any HTTP client
to integrate with us. You will likely find it easier to use one of our
[autogenerated SDKs](https://github.com/vericred/?query=vericred-),
which we make available for several common programming languages.

## Authentication

To authenticate, pass the API Key you created in the Developer Portal as
a `Vericred-Api-Key` header.

`curl -H 'Vericred-Api-Key: YOUR_KEY' "https://api.vericred.com/providers?search_term=Foo&zip_code=11215"`

## Versioning

Vericred's API default to the latest version.  However, if you need a specific
version, you can request it with an `Accept-Version` header.

The current version is `v3`.  Previous versions are `v1` and `v2`.

`curl -H 'Vericred-Api-Key: YOUR_KEY' -H 'Accept-Version: v2' "https://api.vericred.com/providers?search_term=Foo&zip_code=11215"`

## Pagination

Endpoints that accept `page` and `per_page` parameters are paginated. They expose
four additional fields that contain data about your position in the response,
namely `Total`, `Per-Page`, `Link`, and `Page` as described in [RFC-5988](https://tools.ietf.org/html/rfc5988).

For example, to display 5 results per page and view the second page of a
`GET` to `/networks`, your final request would be `GET /networks?....page=2&per_page=5`.

## Sideloading

When we return multiple levels of an object graph (e.g. `Provider`s and their `State`s
we sideload the associated data.  In this example, we would provide an Array of
`State`s and a `state_id` for each provider.  This is done primarily to reduce the
payload size since many of the `Provider`s will share a `State`

```
{
  providers: [{ id: 1, state_id: 1}, { id: 2, state_id: 1 }],
  states: [{ id: 1, code: 'NY' }]
}
```

If you need the second level of the object graph, you can just match the
corresponding id.

## Selecting specific data

All endpoints allow you to specify which fields you would like to return.
This allows you to limit the response to contain only the data you need.

For example, let's take a request that returns the following JSON by default

```
{
  provider: {
    id: 1,
    name: 'John',
    phone: '1234567890',
    field_we_dont_care_about: 'value_we_dont_care_about'
  },
  states: [{
    id: 1,
    name: 'New York',
    code: 'NY',
    field_we_dont_care_about: 'value_we_dont_care_about'
  }]
}
```

To limit our results to only return the fields we care about, we specify the
`select` query string parameter for the corresponding fields in the JSON
document.

In this case, we want to select `name` and `phone` from the `provider` key,
so we would add the parameters `select=provider.name,provider.phone`.
We also want the `name` and `code` from the `states` key, so we would
add the parameters `select=states.name,states.code`.  The id field of
each document is always returned whether or not it is requested.

Our final request would be `GET /providers/12345?select=provider.name,provider.phone,states.name,states.code`

The response would be

```
{
  provider: {
    id: 1,
    name: 'John',
    phone: '1234567890'
  },
  states: [{
    id: 1,
    name: 'New York',
    code: 'NY'
  }]
}
```

## Benefits summary format
Benefit cost-share strings are formatted to capture:
 * Network tiers
 * Compound or conditional cost-share
 * Limits on the cost-share
 * Benefit-specific maximum out-of-pocket costs

**Example #1**
As an example, we would represent [this Summary of Benefits &amp; Coverage](https://s3.amazonaws.com/vericred-data/SBC/2017/33602TX0780032.pdf) as:

* **Hospital stay facility fees**:
  - Network Provider: `$400 copay/admit plus 20% coinsurance`
  - Out-of-Network Provider: `$1,500 copay/admit plus 50% coinsurance`
  - Vericred's format for this benefit: `In-Network: $400 before deductible then 20% after deductible / Out-of-Network: $1,500 before deductible then 50% after deductible`

* **Rehabilitation services:**
  - Network Provider: `20% coinsurance`
  - Out-of-Network Provider: `50% coinsurance`
  - Limitations & Exceptions: `35 visit maximum per benefit period combined with Chiropractic care.`
  - Vericred's format for this benefit: `In-Network: 20% after deductible / Out-of-Network: 50% after deductible | limit: 35 visit(s) per Benefit Period`

**Example #2**
In [this other Summary of Benefits &amp; Coverage](https://s3.amazonaws.com/vericred-data/SBC/2017/40733CA0110568.pdf), the **specialty_drugs** cost-share has a maximum out-of-pocket for in-network pharmacies.
* **Specialty drugs:**
  - Network Provider: `40% coinsurance up to a $500 maximum for up to a 30 day supply`
  - Out-of-Network Provider `Not covered`
  - Vericred's format for this benefit: `In-Network: 40% after deductible, up to $500 per script / Out-of-Network: 100%`

**BNF**

Here's a description of the benefits summary string, represented as a context-free grammar:

```
root                      ::= coverage

coverage                  ::= (simple_coverage | tiered_coverage) (space pipe space coverage_modifier)?
tiered_coverage           ::= tier (space slash space tier)*
tier                      ::= tier_name colon space (tier_coverage | not_applicable)
tier_coverage             ::= simple_coverage (space (then | or | and) space simple_coverage)* tier_limitation?
simple_coverage           ::= (pre_coverage_limitation space)? coverage_amount (space post_coverage_limitation)? (comma? space coverage_condition)?
coverage_modifier         ::= limit_condition colon space (((simple_coverage | simple_limitation) (semicolon space see_carrier_documentation)?) | see_carrier_documentation | waived_if_admitted | shared_across_tiers)
waived_if_admitted        ::= ("copay" space)? "waived if admitted"
simple_limitation         ::= pre_coverage_limitation space "copay applies"
tier_name                 ::= "In-Network-Tier-2" | "Out-of-Network" | "In-Network"
limit_condition           ::= "limit" | "condition"
tier_limitation           ::= comma space "up to" space (currency | (integer space time_unit plural?)) (space post_coverage_limitation)?
coverage_amount           ::= currency | unlimited | included | unknown | percentage | (digits space (treatment_unit | time_unit) plural?)
pre_coverage_limitation   ::= first space digits space time_unit plural?
post_coverage_limitation  ::= (((then space currency) | "per condition") space)? "per" space (treatment_unit | (integer space time_unit) | time_unit) plural?
coverage_condition        ::= ("before deductible" | "after deductible" | "penalty" | allowance | "in-state" | "out-of-state") (space allowance)?
allowance                 ::= upto_allowance | after_allowance
upto_allowance            ::= "up to" space (currency space)? "allowance"
after_allowance           ::= "after" space (currency space)? "allowance"
see_carrier_documentation ::= "see carrier documentation for more information"
shared_across_tiers       ::= "shared across all tiers"
unknown                   ::= "unknown"
unlimited                 ::= /[uU]nlimited/
included                  ::= /[iI]ncluded in [mM]edical/
time_unit                 ::= /[hH]our/ | (((/[cC]alendar/ | /[cC]ontract/) space)? /[yY]ear/) | /[mM]onth/ | /[dD]ay/ | /[wW]eek/ | /[vV]isit/ | /[lL]ifetime/ | ((((/[bB]enefit/ plural?) | /[eE]ligibility/) space)? /[pP]eriod/)
treatment_unit            ::= /[pP]erson/ | /[gG]roup/ | /[cC]ondition/ | /[sS]cript/ | /[vV]isit/ | /[eE]xam/ | /[iI]tem/ | /[sS]tay/ | /[tT]reatment/ | /[aA]dmission/ | /[eE]pisode/
comma                     ::= ","
colon                     ::= ":"
semicolon                 ::= ";"
pipe                      ::= "|"
slash                     ::= "/"
plural                    ::= "(s)" | "s"
then                      ::= "then" | ("," space) | space
or                        ::= "or"
and                       ::= "and"
not_applicable            ::= "Not Applicable" | "N/A" | "NA"
first                     ::= "first"
currency                  ::= "$" number
percentage                ::= number "%"
number                    ::= float | integer
float                     ::= digits "." digits
integer                   ::= /[0-9]/+ (comma_int | under_int)*
comma_int                 ::= ("," /[0-9]/*3) !"_"
under_int                 ::= ("_" /[0-9]/*3) !","
digits                    ::= /[0-9]/+ ("_" /[0-9]/+)*
space                     ::= /[ \t]/+
```


*/


/* OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * VisionPlanBenefits Class Doc Comment
 *
 * @category    Class */
/** 
 * @package     Vericred\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class VisionPlanBenefits implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'VisionPlanBenefits';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'individual_deductible' => 'string',
        'family_deductible' => 'string',
        'individual_annual_max' => 'string',
        'family_max_annual_max' => 'string',
        'individual_moop' => 'string',
        'family_moop' => 'string',
        'eye_exam' => 'string',
        'frame' => 'string',
        'contacts' => 'string',
        'laser_vision_correction' => 'string',
        'progressive_lenses' => 'string',
        'uv_lenses' => 'string',
        'scratch_resistant_coating' => 'string',
        'antireflective_coating' => 'string',
        'photochromatic_single_vision' => 'string',
        'photochromatic_multifocal' => 'string',
        'polychromatic_single_vision' => 'string',
        'polychromatic_multifocal' => 'string'
    );

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'individual_deductible' => 'individual_deductible',
        'family_deductible' => 'family_deductible',
        'individual_annual_max' => 'individual_annual_max',
        'family_max_annual_max' => 'family_max_annual_max',
        'individual_moop' => 'individual_moop',
        'family_moop' => 'family_moop',
        'eye_exam' => 'eye_exam',
        'frame' => 'frame',
        'contacts' => 'contacts',
        'laser_vision_correction' => 'laser_vision_correction',
        'progressive_lenses' => 'progressive_lenses',
        'uv_lenses' => 'uv_lenses',
        'scratch_resistant_coating' => 'scratch_resistant_coating',
        'antireflective_coating' => 'antireflective_coating',
        'photochromatic_single_vision' => 'photochromatic_single_vision',
        'photochromatic_multifocal' => 'photochromatic_multifocal',
        'polychromatic_single_vision' => 'polychromatic_single_vision',
        'polychromatic_multifocal' => 'polychromatic_multifocal'
    );

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'individual_deductible' => 'setIndividualDeductible',
        'family_deductible' => 'setFamilyDeductible',
        'individual_annual_max' => 'setIndividualAnnualMax',
        'family_max_annual_max' => 'setFamilyMaxAnnualMax',
        'individual_moop' => 'setIndividualMoop',
        'family_moop' => 'setFamilyMoop',
        'eye_exam' => 'setEyeExam',
        'frame' => 'setFrame',
        'contacts' => 'setContacts',
        'laser_vision_correction' => 'setLaserVisionCorrection',
        'progressive_lenses' => 'setProgressiveLenses',
        'uv_lenses' => 'setUvLenses',
        'scratch_resistant_coating' => 'setScratchResistantCoating',
        'antireflective_coating' => 'setAntireflectiveCoating',
        'photochromatic_single_vision' => 'setPhotochromaticSingleVision',
        'photochromatic_multifocal' => 'setPhotochromaticMultifocal',
        'polychromatic_single_vision' => 'setPolychromaticSingleVision',
        'polychromatic_multifocal' => 'setPolychromaticMultifocal'
    );

    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'individual_deductible' => 'getIndividualDeductible',
        'family_deductible' => 'getFamilyDeductible',
        'individual_annual_max' => 'getIndividualAnnualMax',
        'family_max_annual_max' => 'getFamilyMaxAnnualMax',
        'individual_moop' => 'getIndividualMoop',
        'family_moop' => 'getFamilyMoop',
        'eye_exam' => 'getEyeExam',
        'frame' => 'getFrame',
        'contacts' => 'getContacts',
        'laser_vision_correction' => 'getLaserVisionCorrection',
        'progressive_lenses' => 'getProgressiveLenses',
        'uv_lenses' => 'getUvLenses',
        'scratch_resistant_coating' => 'getScratchResistantCoating',
        'antireflective_coating' => 'getAntireflectiveCoating',
        'photochromatic_single_vision' => 'getPhotochromaticSingleVision',
        'photochromatic_multifocal' => 'getPhotochromaticMultifocal',
        'polychromatic_single_vision' => 'getPolychromaticSingleVision',
        'polychromatic_multifocal' => 'getPolychromaticMultifocal'
    );

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['individual_deductible'] = isset($data['individual_deductible']) ? $data['individual_deductible'] : null;
        $this->container['family_deductible'] = isset($data['family_deductible']) ? $data['family_deductible'] : null;
        $this->container['individual_annual_max'] = isset($data['individual_annual_max']) ? $data['individual_annual_max'] : null;
        $this->container['family_max_annual_max'] = isset($data['family_max_annual_max']) ? $data['family_max_annual_max'] : null;
        $this->container['individual_moop'] = isset($data['individual_moop']) ? $data['individual_moop'] : null;
        $this->container['family_moop'] = isset($data['family_moop']) ? $data['family_moop'] : null;
        $this->container['eye_exam'] = isset($data['eye_exam']) ? $data['eye_exam'] : null;
        $this->container['frame'] = isset($data['frame']) ? $data['frame'] : null;
        $this->container['contacts'] = isset($data['contacts']) ? $data['contacts'] : null;
        $this->container['laser_vision_correction'] = isset($data['laser_vision_correction']) ? $data['laser_vision_correction'] : null;
        $this->container['progressive_lenses'] = isset($data['progressive_lenses']) ? $data['progressive_lenses'] : null;
        $this->container['uv_lenses'] = isset($data['uv_lenses']) ? $data['uv_lenses'] : null;
        $this->container['scratch_resistant_coating'] = isset($data['scratch_resistant_coating']) ? $data['scratch_resistant_coating'] : null;
        $this->container['antireflective_coating'] = isset($data['antireflective_coating']) ? $data['antireflective_coating'] : null;
        $this->container['photochromatic_single_vision'] = isset($data['photochromatic_single_vision']) ? $data['photochromatic_single_vision'] : null;
        $this->container['photochromatic_multifocal'] = isset($data['photochromatic_multifocal']) ? $data['photochromatic_multifocal'] : null;
        $this->container['polychromatic_single_vision'] = isset($data['polychromatic_single_vision']) ? $data['polychromatic_single_vision'] : null;
        $this->container['polychromatic_multifocal'] = isset($data['polychromatic_multifocal']) ? $data['polychromatic_multifocal'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        return true;
    }


    /**
     * Gets individual_deductible
     * @return string
     */
    public function getIndividualDeductible()
    {
        return $this->container['individual_deductible'];
    }

    /**
     * Sets individual_deductible
     * @param string $individual_deductible Individual Deductible benefit string
     * @return $this
     */
    public function setIndividualDeductible($individual_deductible)
    {
        $this->container['individual_deductible'] = $individual_deductible;

        return $this;
    }

    /**
     * Gets family_deductible
     * @return string
     */
    public function getFamilyDeductible()
    {
        return $this->container['family_deductible'];
    }

    /**
     * Sets family_deductible
     * @param string $family_deductible Family Deductible benefit string
     * @return $this
     */
    public function setFamilyDeductible($family_deductible)
    {
        $this->container['family_deductible'] = $family_deductible;

        return $this;
    }

    /**
     * Gets individual_annual_max
     * @return string
     */
    public function getIndividualAnnualMax()
    {
        return $this->container['individual_annual_max'];
    }

    /**
     * Sets individual_annual_max
     * @param string $individual_annual_max Individual Annual Max benefit string
     * @return $this
     */
    public function setIndividualAnnualMax($individual_annual_max)
    {
        $this->container['individual_annual_max'] = $individual_annual_max;

        return $this;
    }

    /**
     * Gets family_max_annual_max
     * @return string
     */
    public function getFamilyMaxAnnualMax()
    {
        return $this->container['family_max_annual_max'];
    }

    /**
     * Sets family_max_annual_max
     * @param string $family_max_annual_max Family Max Annual Max benefit string
     * @return $this
     */
    public function setFamilyMaxAnnualMax($family_max_annual_max)
    {
        $this->container['family_max_annual_max'] = $family_max_annual_max;

        return $this;
    }

    /**
     * Gets individual_moop
     * @return string
     */
    public function getIndividualMoop()
    {
        return $this->container['individual_moop'];
    }

    /**
     * Sets individual_moop
     * @param string $individual_moop Individual MOOP benefit string
     * @return $this
     */
    public function setIndividualMoop($individual_moop)
    {
        $this->container['individual_moop'] = $individual_moop;

        return $this;
    }

    /**
     * Gets family_moop
     * @return string
     */
    public function getFamilyMoop()
    {
        return $this->container['family_moop'];
    }

    /**
     * Sets family_moop
     * @param string $family_moop Family MOOP benefit string
     * @return $this
     */
    public function setFamilyMoop($family_moop)
    {
        $this->container['family_moop'] = $family_moop;

        return $this;
    }

    /**
     * Gets eye_exam
     * @return string
     */
    public function getEyeExam()
    {
        return $this->container['eye_exam'];
    }

    /**
     * Sets eye_exam
     * @param string $eye_exam Eye Exam benefit string
     * @return $this
     */
    public function setEyeExam($eye_exam)
    {
        $this->container['eye_exam'] = $eye_exam;

        return $this;
    }

    /**
     * Gets frame
     * @return string
     */
    public function getFrame()
    {
        return $this->container['frame'];
    }

    /**
     * Sets frame
     * @param string $frame Frame benefit string
     * @return $this
     */
    public function setFrame($frame)
    {
        $this->container['frame'] = $frame;

        return $this;
    }

    /**
     * Gets contacts
     * @return string
     */
    public function getContacts()
    {
        return $this->container['contacts'];
    }

    /**
     * Sets contacts
     * @param string $contacts Contacts benefit string
     * @return $this
     */
    public function setContacts($contacts)
    {
        $this->container['contacts'] = $contacts;

        return $this;
    }

    /**
     * Gets laser_vision_correction
     * @return string
     */
    public function getLaserVisionCorrection()
    {
        return $this->container['laser_vision_correction'];
    }

    /**
     * Sets laser_vision_correction
     * @param string $laser_vision_correction Laser Vision Correction benefit string
     * @return $this
     */
    public function setLaserVisionCorrection($laser_vision_correction)
    {
        $this->container['laser_vision_correction'] = $laser_vision_correction;

        return $this;
    }

    /**
     * Gets progressive_lenses
     * @return string
     */
    public function getProgressiveLenses()
    {
        return $this->container['progressive_lenses'];
    }

    /**
     * Sets progressive_lenses
     * @param string $progressive_lenses Progressive Lenses benefit string
     * @return $this
     */
    public function setProgressiveLenses($progressive_lenses)
    {
        $this->container['progressive_lenses'] = $progressive_lenses;

        return $this;
    }

    /**
     * Gets uv_lenses
     * @return string
     */
    public function getUvLenses()
    {
        return $this->container['uv_lenses'];
    }

    /**
     * Sets uv_lenses
     * @param string $uv_lenses UV Lenses benefit string
     * @return $this
     */
    public function setUvLenses($uv_lenses)
    {
        $this->container['uv_lenses'] = $uv_lenses;

        return $this;
    }

    /**
     * Gets scratch_resistant_coating
     * @return string
     */
    public function getScratchResistantCoating()
    {
        return $this->container['scratch_resistant_coating'];
    }

    /**
     * Sets scratch_resistant_coating
     * @param string $scratch_resistant_coating Scratch-Resistant Coating benefit string
     * @return $this
     */
    public function setScratchResistantCoating($scratch_resistant_coating)
    {
        $this->container['scratch_resistant_coating'] = $scratch_resistant_coating;

        return $this;
    }

    /**
     * Gets antireflective_coating
     * @return string
     */
    public function getAntireflectiveCoating()
    {
        return $this->container['antireflective_coating'];
    }

    /**
     * Sets antireflective_coating
     * @param string $antireflective_coating Antireflective Coating benefit string
     * @return $this
     */
    public function setAntireflectiveCoating($antireflective_coating)
    {
        $this->container['antireflective_coating'] = $antireflective_coating;

        return $this;
    }

    /**
     * Gets photochromatic_single_vision
     * @return string
     */
    public function getPhotochromaticSingleVision()
    {
        return $this->container['photochromatic_single_vision'];
    }

    /**
     * Sets photochromatic_single_vision
     * @param string $photochromatic_single_vision Photochromatic - Single Vision benefit string
     * @return $this
     */
    public function setPhotochromaticSingleVision($photochromatic_single_vision)
    {
        $this->container['photochromatic_single_vision'] = $photochromatic_single_vision;

        return $this;
    }

    /**
     * Gets photochromatic_multifocal
     * @return string
     */
    public function getPhotochromaticMultifocal()
    {
        return $this->container['photochromatic_multifocal'];
    }

    /**
     * Sets photochromatic_multifocal
     * @param string $photochromatic_multifocal Photochromatic - Mutlifocal benefit string
     * @return $this
     */
    public function setPhotochromaticMultifocal($photochromatic_multifocal)
    {
        $this->container['photochromatic_multifocal'] = $photochromatic_multifocal;

        return $this;
    }

    /**
     * Gets polychromatic_single_vision
     * @return string
     */
    public function getPolychromaticSingleVision()
    {
        return $this->container['polychromatic_single_vision'];
    }

    /**
     * Sets polychromatic_single_vision
     * @param string $polychromatic_single_vision Polychromatic - Single Vision benefit string
     * @return $this
     */
    public function setPolychromaticSingleVision($polychromatic_single_vision)
    {
        $this->container['polychromatic_single_vision'] = $polychromatic_single_vision;

        return $this;
    }

    /**
     * Gets polychromatic_multifocal
     * @return string
     */
    public function getPolychromaticMultifocal()
    {
        return $this->container['polychromatic_multifocal'];
    }

    /**
     * Sets polychromatic_multifocal
     * @param string $polychromatic_multifocal Polychromatic - Mutlifocal benefit string
     * @return $this
     */
    public function setPolychromaticMultifocal($polychromatic_multifocal)
    {
        $this->container['polychromatic_multifocal'] = $polychromatic_multifocal;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Vericred\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Vericred\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


