<?php
/**
 * InlineResponse2002
 *
 * PHP version 5
 *
 * @category Class
 * @package  Vericred\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
/**
 * InlineResponse2002 Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     Vericred\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class InlineResponse2002 implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    static $swaggerModelName = 'inline_response_200_2';

    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'zip_counties' => '\Swagger\Client\Model\ZipCounty[]',
        'counties' => '\Swagger\Client\Model\County[]',
        'zip_codes' => '\Swagger\Client\Model\ZipCode[]'
    );
  
    static function swaggerTypes() {
        return self::$swaggerTypes;
    }

    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'zip_counties' => 'zip_counties',
        'counties' => 'counties',
        'zip_codes' => 'zip_codes'
    );
  
    static function attributeMap() {
        return self::$attributeMap;
    }

    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'zip_counties' => 'setZipCounties',
        'counties' => 'setCounties',
        'zip_codes' => 'setZipCodes'
    );
  
    static function setters() {
        return self::$setters;
    }

    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'zip_counties' => 'getZipCounties',
        'counties' => 'getCounties',
        'zip_codes' => 'getZipCodes'
    );
  
    static function getters() {
        return self::$getters;
    }

    /**
      * $zip_counties 
      * @var \Swagger\Client\Model\ZipCounty[]
      */
    protected $zip_counties;
    /**
      * $counties 
      * @var \Swagger\Client\Model\County[]
      */
    protected $counties;
    /**
      * $zip_codes 
      * @var \Swagger\Client\Model\ZipCode[]
      */
    protected $zip_codes;

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        
        
        if ($data != null) {
            $this->zip_counties = $data["zip_counties"];
            $this->counties = $data["counties"];
            $this->zip_codes = $data["zip_codes"];
        }
    }
    /**
     * Gets zip_counties
     * @return \Swagger\Client\Model\ZipCounty[]
     */
    public function getZipCounties()
    {
        return $this->zip_counties;
    }
  
    /**
     * Sets zip_counties
     * @param \Swagger\Client\Model\ZipCounty[] $zip_counties 
     * @return $this
     */
    public function setZipCounties($zip_counties)
    {
        
        $this->zip_counties = $zip_counties;
        return $this;
    }
    /**
     * Gets counties
     * @return \Swagger\Client\Model\County[]
     */
    public function getCounties()
    {
        return $this->counties;
    }
  
    /**
     * Sets counties
     * @param \Swagger\Client\Model\County[] $counties 
     * @return $this
     */
    public function setCounties($counties)
    {
        
        $this->counties = $counties;
        return $this;
    }
    /**
     * Gets zip_codes
     * @return \Swagger\Client\Model\ZipCode[]
     */
    public function getZipCodes()
    {
        return $this->zip_codes;
    }
  
    /**
     * Sets zip_codes
     * @param \Swagger\Client\Model\ZipCode[] $zip_codes 
     * @return $this
     */
    public function setZipCodes($zip_codes)
    {
        
        $this->zip_codes = $zip_codes;
        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Vericred\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Vericred\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}
