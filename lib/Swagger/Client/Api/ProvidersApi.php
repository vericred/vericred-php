<?php
/**
 * ProvidersApi
 * PHP version 5
 *
 * @category Class
 * @package  Vericred\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program. 
 * https://github.com/swagger-api/swagger-codegen 
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use \Vericred\Client\Configuration;
use \Vericred\Client\ApiClient;
use \Vericred\Client\ApiException;
use \Vericred\Client\ObjectSerializer;

/**
 * ProvidersApi Class Doc Comment
 *
 * @category Class
 * @package  Vericred\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ProvidersApi
{

    /**
     * API Client
     * @var \Vericred\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;
  
    /**
     * Constructor
     * @param \Vericred\Client\ApiClient|null $apiClient The api client to use
     */
    function __construct($apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('https://api.vericred.com/');
        }
  
        $this->apiClient = $apiClient;
    }
  
    /**
     * Get API client
     * @return \Vericred\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }
  
    /**
     * Set the API client
     * @param \Vericred\Client\ApiClient $apiClient set the API client
     * @return ProvidersApi
     */
    public function setApiClient(ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }
  
    /**
     * providersGet
     *
     * Find providers by term and zip code
     *
     * @param string $search_term String to search by (required)
     * @param string $zip_code Zip Code to search near (required)
     * @param string $accepts_insurance Limit results to Providers who accept at least one insurance plan.  Note that the inverse of this filter is not supported and any value will evaluate to true (optional)
     * @param string[] $hios_ids HIOS id of one or more plans (optional)
     * @param string $page Page number (optional)
     * @param string $per_page Number of records to return per page (optional)
     * @param string $radius Radius (in miles) to use to limit results (optional)
     * @return \Swagger\Client\Model\InlineResponse200
     * @throws \Vericred\Client\ApiException on non-2xx response
     */
    public function providersGet($search_term, $zip_code, $accepts_insurance = null, $hios_ids = null, $page = null, $per_page = null, $radius = null)
    {
        list($response) = $this->providersGetWithHttpInfo ($search_term, $zip_code, $accepts_insurance, $hios_ids, $page, $per_page, $radius);
        return $response; 
    }


    /**
     * providersGetWithHttpInfo
     *
     * Find providers by term and zip code
     *
     * @param string $search_term String to search by (required)
     * @param string $zip_code Zip Code to search near (required)
     * @param string $accepts_insurance Limit results to Providers who accept at least one insurance plan.  Note that the inverse of this filter is not supported and any value will evaluate to true (optional)
     * @param string[] $hios_ids HIOS id of one or more plans (optional)
     * @param string $page Page number (optional)
     * @param string $per_page Number of records to return per page (optional)
     * @param string $radius Radius (in miles) to use to limit results (optional)
     * @return Array of \Swagger\Client\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     * @throws \Vericred\Client\ApiException on non-2xx response
     */
    public function providersGetWithHttpInfo($search_term, $zip_code, $accepts_insurance = null, $hios_ids = null, $page = null, $per_page = null, $radius = null)
    {
        
        // verify the required parameter 'search_term' is set
        if ($search_term === null) {
            throw new \InvalidArgumentException('Missing the required parameter $search_term when calling providersGet');
        }

        // verify the required parameter 'zip_code' is set
        if ($zip_code === null) {
            throw new \InvalidArgumentException('Missing the required parameter $zip_code when calling providersGet');
        }
  
        // parse inputs
        $resourcePath = "/providers";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());
  
        // query params
        if ($accepts_insurance !== null) {
            $queryParams['accepts_insurance'] = $this->apiClient->getSerializer()->toQueryValue($accepts_insurance);
        }// query params
        if (is_array($hios_ids)) {
            $hios_ids = $this->apiClient->getSerializer()->serializeCollection($hios_ids, 'csv', true);
        }
        if ($hios_ids !== null) {
            $queryParams['hios_ids'] = $this->apiClient->getSerializer()->toQueryValue($hios_ids);
        }// query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }// query params
        if ($per_page !== null) {
            $queryParams['per_page'] = $this->apiClient->getSerializer()->toQueryValue($per_page);
        }// query params
        if ($radius !== null) {
            $queryParams['radius'] = $this->apiClient->getSerializer()->toQueryValue($radius);
        }// query params
        if ($search_term !== null) {
            $queryParams['search_term'] = $this->apiClient->getSerializer()->toQueryValue($search_term);
        }// query params
        if ($zip_code !== null) {
            $queryParams['zip_code'] = $this->apiClient->getSerializer()->toQueryValue($zip_code);
        }
        
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\Swagger\Client\Model\InlineResponse200'
            );
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse200', $httpHeader), $statusCode, $httpHeader);
                    } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse200', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    /**
     * providersNpiGet
     *
     * Find a specific Provider
     *
     * @param string $npi NPI number (required)
     * @return \Swagger\Client\Model\InlineResponse2001
     * @throws \Vericred\Client\ApiException on non-2xx response
     */
    public function providersNpiGet($npi)
    {
        list($response) = $this->providersNpiGetWithHttpInfo ($npi);
        return $response; 
    }


    /**
     * providersNpiGetWithHttpInfo
     *
     * Find a specific Provider
     *
     * @param string $npi NPI number (required)
     * @return Array of \Swagger\Client\Model\InlineResponse2001, HTTP status code, HTTP response headers (array of strings)
     * @throws \Vericred\Client\ApiException on non-2xx response
     */
    public function providersNpiGetWithHttpInfo($npi)
    {
        
        // verify the required parameter 'npi' is set
        if ($npi === null) {
            throw new \InvalidArgumentException('Missing the required parameter $npi when calling providersNpiGet');
        }
  
        // parse inputs
        $resourcePath = "/providers/{npi}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());
  
        
        
        // path params
        if ($npi !== null) {
            $resourcePath = str_replace(
                "{" . "npi" . "}",
                $this->apiClient->getSerializer()->toPathValue($npi),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
                // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\Swagger\Client\Model\InlineResponse2001'
            );
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse2001', $httpHeader), $statusCode, $httpHeader);
                    } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse2001', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
}
